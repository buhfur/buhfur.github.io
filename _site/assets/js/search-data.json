{"0": {
    "doc": "Home",
    "title": "Home",
    "content": "This is a bare-minimum template to create a Jekyll site that uses the Just the Docs theme. You can easily set the created site to be published on GitHub Pages – the README file explains how to do that, along with other details. If Jekyll is installed on your computer, you can also build and preview the created site locally. This lets you test changes before committing them, and avoids waiting for GitHub Pages.1 And you will be able to deploy your local build to a different platform than GitHub Pages. More specifically, the created site: . | uses a gem-based approach, i.e. uses a Gemfile and loads the just-the-docs gem | uses the GitHub Pages / Actions workflow to build and publish the site on GitHub Pages | . Other than that, you’re free to customize sites that you create with this template, however you like. You can easily change the versions of just-the-docs and Jekyll it uses, as well as adding further plugins. Browse our documentation to learn more about how to use this theme. To get started with creating a site, simply: . | click “use this template” to create a GitHub repository | go to Settings &gt; Pages &gt; Build and deployment &gt; Source, and select GitHub Actions | . If you want to maintain your docs in the docs directory of an existing project repo, see Hosting your docs from an existing project repo in the template README. | It can take up to 10 minutes for changes to your site to publish after you push the changes to GitHub. &#8617; . | . ",
    "url": "/",
    
    "relUrl": "/"
  },"1": {
    "doc": "Linux",
    "title": "Linux notes for reference",
    "content": "In this document I have added various bash snippets ,tips , and other useful pieces of knowledge that might help me navigate the insane POWAH of linux. ",
    "url": "/_docs/linux.html#linux-notes-for-reference",
    
    "relUrl": "/_docs/linux.html#linux-notes-for-reference"
  },"2": {
    "doc": "Linux",
    "title": "Table of contents",
    "content": ". | System Info | Command &amp; Bash snippets | System Tools and 3rd party utilities command snippets | Xinitrc | Tips &amp; tricks | ProtonVPN connections | Setting up torrent server vm | Redirect both STDOUT and STDERR | Piping | Tar | Systemd | xrandr | Packet Capturing | nmcli &amp; Networking | SELinux | DNF | Adguard Home | Firewalld | NFS | NTP | Podman | User management | Package management with DNF | Logical Volume Management | CIFS | NMAP | GRUB | Common errors and small fixes | Docker | Sed | Oracle SBC | TrueNAS | Grep | Find | System Clipboard | Unzip | Display Management | Git | Xorg | Rclone | Du | Ranger | Markdown | Youtube downloading | Serial Communication | Jekyll | ChatGPT CLI | Rust | Zsh . | Installing Zsh | . | Password encryption ",
    "url": "/_docs/linux.html#table-of-contents",
    
    "relUrl": "/_docs/linux.html#table-of-contents"
  },"3": {
    "doc": "Linux",
    "title": "Package managers",
    "content": "| . ",
    "url": "/_docs/linux.html#package-managers",
    
    "relUrl": "/_docs/linux.html#package-managers"
  },"4": {
    "doc": "Linux",
    "title": "Apt",
    "content": ". | Query PPA for packages apt-cache search &lt;package-name&gt; . | Query PPA for NVIDIA package apt-cache search nvidia . | . ",
    "url": "/_docs/linux.html#apt",
    
    "relUrl": "/_docs/linux.html#apt"
  },"5": {
    "doc": "Linux",
    "title": "RHEL",
    "content": "To be continued . ",
    "url": "/_docs/linux.html#rhel",
    
    "relUrl": "/_docs/linux.html#rhel"
  },"6": {
    "doc": "Linux",
    "title": "System info",
    "content": " ",
    "url": "/_docs/linux.html#system-info",
    
    "relUrl": "/_docs/linux.html#system-info"
  },"7": {
    "doc": "Linux",
    "title": "Create drive for mounting usb using fdisk",
    "content": ". | For UEFI systems . | Partition Table : GPT | Partition Type : EFI System Partition | Filesystem: FAT32 | . | For BIOS systems . | Partition Table : MBR | Partition Type : Primary | Filesystem: FAT32 or ext4 (FAT32 preferred ) | . | For everything else . | Partition Table : MBR | Partition Type : Primary | Filesystem: FAT32 | . | . ",
    "url": "/_docs/linux.html#create-drive-for-mounting-usb-using-fdisk",
    
    "relUrl": "/_docs/linux.html#create-drive-for-mounting-usb-using-fdisk"
  },"8": {
    "doc": "Linux",
    "title": "Downgrading kernel",
    "content": ". | Install Image, Headers , and generic Headers for the kernel version you are choosing . | Install all 3 files , last time I was downgrading an ubuntu 24.04 distro using Kernel Version : 6.8.0-48-generic down to 5.8.5 . | Update grub config . | . ",
    "url": "/_docs/linux.html#downgrading-kernel",
    
    "relUrl": "/_docs/linux.html#downgrading-kernel"
  },"9": {
    "doc": "Linux",
    "title": "System Memory",
    "content": ". | Using /proc/meminfo cat /proc/meminfo . | Using free free -h . | Using vmstat vmstat -s . | Using dmidecode sudo dmidecode -t memory . | Using inxi . | install inxi sudo apt install inxi . | Run following command inxi -m . | . | . ",
    "url": "/_docs/linux.html#system-memory",
    
    "relUrl": "/_docs/linux.html#system-memory"
  },"10": {
    "doc": "Linux",
    "title": "Swap files",
    "content": "When setting up swap files , the size of the partition used for a swap file depends on the size of the host systems memory. | If your system has 2 GB or less , the swap file should be 2-4 times the amount of ram . | If your system has 4-8 GB of ram , the swap file size only needs to be 1-2 times the amount of RAM . | If your system has 8-16 GB of ram , the swap file size should be 0.5-1 times the amount of ram . | . ",
    "url": "/_docs/linux.html#swap-files",
    
    "relUrl": "/_docs/linux.html#swap-files"
  },"11": {
    "doc": "Linux",
    "title": "UEFI &amp; Legacy BIOS mode",
    "content": ". | Check if you’re booted into UEFI using /sys/firmware ls /sys/firmware/efi . | Check if you’re booted into UEFI using efibootmgr ( only works in UEFI mode ) sudo efibootmgr . | . Note: If you see any contents in the /sys/firmware/efi directory , then you will know you are currently using UEFI mode . ",
    "url": "/_docs/linux.html#uefi--legacy-bios-mode",
    
    "relUrl": "/_docs/linux.html#uefi--legacy-bios-mode"
  },"12": {
    "doc": "Linux",
    "title": "Command &amp; Bash snippets",
    "content": ". | Write iso image to usb sudo dd if=/path/to/distro.iso of=/dev/sdX bs=4M status=progress oflag=sync . | Bash difference between $() and ${} | . ”${}” : Used for referencing variables in a script . - Example ```bash echo ${var} something ``` . ”$()” : Used for running commands in a subshell . - Example ```bash echo \"Path $(basename /home/user/Downloads) ``` . | Redirect both STDOUT and STDERR . command &amp;&gt; /dev/null . command &gt; /dev/null 2&gt;&amp;1 . | Symbolic and hard links ln -s TARGET LINK_NAME . The best information can be found on the man page. Use man ln for further details. However, to avoid confusion, please note that the syntax is as follows: “TARGET” should be the file or directory for which you would like to create a link, while “LINK_NAME” is the name and directory where the link will appear in the specified absolute file path. It should be noted that “TARGET” should be an absolute path to the item you want to link. However, you can use relative paths for “LINK_NAME” if you wish. Nonetheless, I prefer using absolute paths for both to avoid making mistakes, such as misplacing the link on my system. | Create symbolic link to file $ ln -s /home/ryan/something.py /opt/scripts/something.py . | Create directory with a timestamp as it’s name timestamp=$(date +\"%Y-%m-%d_%H-%M-%S\") . | Then to make the directory , use the following syntax mkdir \"directory_$(date +%Y%m%d_%H%M%S)\" . | . | Enable vi keybinds for bash set -o vi . | Find bash shortcuts man readline . | Remove file with hyphens in the name rm -- -filename rm ./--filename . | Start comand as background job command &amp; . | . Note: Type jobs to view your background tasks . | Resume suspended background fg . | Change file extension of all files in directory rename 's/\\.foo$/.bar/' *.foo . | . Note: Replace “foo” with the current extension , replace “bar” with the new ext. | Show keycode for keybind xev . | . Note: If you’re using Xorg as your display server, xev should already be installed. This tool let’s you see what keycode goes to what key. - After finding the keycode, run this command below. Substitute \\&lt;KEYCODE\\&gt; with the numerical keycode you retrieve from xev. ```bash xmodmap -pk | grep &lt;KEYCODE&gt; ``` . | Show info about hard drives connected find /dev/disk/by-id/ -type l|xargs -I{} ls -l {}|grep -v -E '[0-9]$' |sort -k11|cut -d' ' -f9,10,11,12 . | Show otherboard info dmidecode -t 2 . | Disable trackpad on linux sudo apt-get install xinput . | Find the name of your touchpad xinput list . Note: Alot of the time trackpads are labeled with “SynPS/x Snynaptics TouchPad”. | Locate the ID in the second column using the command below. xinput --disable &lt;ID&gt; . | . | List all users on host compgen -u | column . | Restore default .bashrc, .profile cat /etc/skel/[.bashrc,.profile,...] ~/.[bashrc,profile,etc...] . | . Note: The default versions of these files are usually going to be stored in /etc/skel . | Show motherboard info dmidecode | less . | Get CPU info lscpu cat /proc/cpuinfo . | Get disk info lsblk -o +MODEL,SERIAL,WWN or ls -l /dev/disk/by-id or lsblk |awk 'NR==1{print $0\" DEVICE-ID(S)\"}NR&gt;1{dev=$1;printf $0\" \";system(\"find /dev/disk/by-id -lname \\\"*\"dev\"\\\" -printf \\\" %p\\\"\");print \"\";}'|grep -v -E 'part|lvm' . | Get UUID of drive lsblk -f or sudo blkid or vim /etc/fstab . | Reduce text entering sensitivity . | Enter this line in your xinitrc , or just copy the xinitrc from the ~/dotfiles directory to your local .xinitrc xset r rate 250 60 . | . | . Note: You can either use kbdrate or xset , preferably xset as it works alot easier. This will reduce the sensitivity . ",
    "url": "/_docs/linux.html#command--bash-snippets",
    
    "relUrl": "/_docs/linux.html#command--bash-snippets"
  },"13": {
    "doc": "Linux",
    "title": "System Tools and 3rd party utilities command snippets",
    "content": "The below section should include tools and snippets from various tools i’ve used. ",
    "url": "/_docs/linux.html#system-tools-and-3rd-party-utilities-command-snippets",
    
    "relUrl": "/_docs/linux.html#system-tools-and-3rd-party-utilities-command-snippets"
  },"14": {
    "doc": "Linux",
    "title": "Minecraft",
    "content": ". | Download location for minecraft shader packs . | If you’re using UltimMC , /home/$USER/UltimMC/instances/1.21.3/.minecraft/shaderpacks ",
    "url": "/_docs/linux.html#minecraft",
    
    "relUrl": "/_docs/linux.html#minecraft"
  },"15": {
    "doc": "Linux",
    "title": "Find",
    "content": "| . | List files with specified extension . find . -name \\*.md . | . Note: Replace “.” with the directory you are searching in and replace “md” with the extension you are trying to search for. | Use find to only list dotfiles find . -maxdepth 1 -type f -name \".*\" . | Change extensions of all files in dir find . -name '*.txt' -exec sh -c 'mv \"$0\" \"${0%.txt}.txt_bak\"' {} \\; . | . Note: Replace .txt with the current ext and replace .txt_bak with the ext you are trying to set it to . ",
    "url": "/_docs/linux.html#find",
    
    "relUrl": "/_docs/linux.html#find"
  },"16": {
    "doc": "Linux",
    "title": "Xinitrc",
    "content": "Note: The xinitrc file is used for loading additional configurations and settings when the Xorg server starts. | Manually disable the caps lock ( lock , not the button itself) using python script python -c 'from ctypes import *; X11 = cdll.LoadLibrary(\"libX11.so.6\"); display = X11.XOpenDisplay(None); X11.XkbLockModifiers(display, c_uint(0x0100), c_uint(2), c_uint(0)); X11.XCloseDisplay(display)' . | . Note: Install numlockx and run the command above . | Using setxkbmap setxkbmap -option caps:none . | Using localectl ( RHEL ) sudo localectl set-x11-keymap us \"\" \"\" caps:none . | Using XKBOPTIONS ( Debian ) . | Open /etc/default/keyboard vim /etc/default/keyboard . | Modify config file XKBOPTIONS=\"caps:none\" . | Apply changes sudo dpkg-reconfigure keyboard-configuration sudo udevadm trigger --subsystem-match=input --action=change . | . | Add aliases for ssh connections . | Open SSH config in vim vim ~/.ssh/config . | In your ssh config , add two lines for each host , one being the IP and the port you want to use Host xxx.xxx.x.x Port xxx . | Then add the IP addresses for the ssh hosts to the /etc/hosts file with the format below IPADDR hostname . | . | Create swap file . | Use dd to create the file using the /dev/zero device dd if=/dev/zero of=/swapfile bs=1M count=100 . | Convert file to swapfile mkswap /swapfile . | Swap to the newly created swap file swapon /swapfile . | Mount the file in /etc/fstab /swapfile none swap defaults 0 0 . Add this line to the bottom of your /etc/fstab file. This will mount the swap file automatically after boot . | . | . ",
    "url": "/_docs/linux.html#xinitrc",
    
    "relUrl": "/_docs/linux.html#xinitrc"
  },"17": {
    "doc": "Linux",
    "title": "Tips &amp; tricks",
    "content": "Below is some useful info for different services and how they can be enabled / modified. | Installing Network Manager on Debian 12 | . One of the issues while installing NetworkManager lies with a preset network configuration by the system. Specifically the file /etc/network/interfaces is configured automatically and for some reason if this is present you will see an error in STDERR when installing asking you to remove the configuration if you want to use Network manager to manage any connections. Simply delete all lines in /etc/network/interfaces and re-install the package and the systemd service file should be present and should allow you to activate it. ",
    "url": "/_docs/linux.html#tips--tricks",
    
    "relUrl": "/_docs/linux.html#tips--tricks"
  },"18": {
    "doc": "Linux",
    "title": "ProtonVPN connections",
    "content": "Note: When using the pre-built OpenVPN configurations , change the file extension to a .conf file , then copy the file over to /etc/openvpn. This will start a daemon for every connection in the directory. | Setting up torrent server vm . | Put ovpn file in /etc/openvpn . | install openvpn-systemd-resolved and network manager . sudo apt install openvpn-systemd-resolved . | . | Piping Reference . | . 0&gt; = STDIN . 1&gt; = STDOUT . &amp;&gt; = STDOUT &amp; STDERR . 2&gt; = STDERR . ",
    "url": "/_docs/linux.html#protonvpn-connections",
    
    "relUrl": "/_docs/linux.html#protonvpn-connections"
  },"19": {
    "doc": "Linux",
    "title": "Tar",
    "content": ". | Archive top level directories with tar sudo tar czf interfaces.tar -C / etc/network/interfaces . | Restore backup from drive tar --overwrite -xzvf backup.tar.gz --directory / . | List contents of archive tar -tf archive.tar . | Add file to archive tar -rf backup.tar file . | Backup entire system with timestamp tar pzvxf --exclude=mnt/ --exclude=sys/ --exclude=proc/ /backup/\"$(date '+%Y-%m-%d').tar.gz\" --one-file-system / . | . Note : it’s a good idea to exclude sys, mnt , and proc as they can cause a backup to freeze. None of these directories should be necessary for archival anyways . | Add timestamp to tar archive tar -zcvf \"$(date '+%Y-%m-%d').tar.gz\" . | Extract tar archive to specific directory tar -xf archive.tar -C /path/to/extract/to . | Extract specific file from archive( Example) . | (Optional) List contents of archive tar -tf archive.tar . | Extract file using path from output tar -xf archive.tar /path/in/archive/to/file . | . | . ",
    "url": "/_docs/linux.html#tar",
    
    "relUrl": "/_docs/linux.html#tar"
  },"20": {
    "doc": "Linux",
    "title": "Systemd",
    "content": ". | Stop the service systemctl stop &lt;unit-name&gt; . | Disable unit systemctl disable &lt;unit-name&gt; . | Stop the unit from being started manually or automatically systemctl mask &lt;unit-name&gt; . | Systemd timer unit template [Unit] Description=Runs My Service every hour [Timer] OnBootSec=10min OnUnitActiveSec=1h Unit=my-service.service [Install] WantedBy=timers.target . | List all Systemd timers systemctl list-timers --all . | Check when Systemd timer will go off systemctl status timer-name.timer . Note: After running this command , you should see a “Trigger” section in the output. This field tells you when the timer will go off next. | Configure unit to run command when stopping / exiting ExecStop=/path/to/command . | . Note: Put this snippet under the “Service” section . | Creating service files that involve X org server PartOf=graphical-session.target . | . If you need to create a service that depends upon an X server running , add this line under the “Unit” section. Also you will want to add this line under the “Install” section. | Config for unit which requires X server to be running WantedBy=xsession.target . | Boot into different target . | Search for all targets you can boot into cd /usr/lib/systemd/system grep Isolate *.target . | Decide which target you would like to use , then run systemctl isolate systemctl isolate something.target . | . | Start systemd service under specific User ID systemctl --user service.name . | Change user systemd service to start on system startup loginctl enable-linger myuser . | . ",
    "url": "/_docs/linux.html#systemd",
    
    "relUrl": "/_docs/linux.html#systemd"
  },"21": {
    "doc": "Linux",
    "title": "Running scripts at startup",
    "content": ". | Using Rc.local sh /home/user/scriptdir/script.sh . | . Add the line above in the /etc/rc.d/rc.local file . | Using Systemd unit file [Unit] Description=Reboot message systemd service. [Service] Type=simple ExecStart=/bin/bash /home/ec2-user/reboot_message.sh [Install] WantedBy=multi-user.target . Use the template above for your script , put this inside /etc/systemd/system . | Set perms for the service file chmod 644 /etc/systemd/system/script.service . | Enable the service file in systemd systemctl enable script.service . | Using Crontab | . | Edit the crontab file crontab -e . | Configure crontab to run script on reboot @reboot sh /home/user/reboot_message.sh . | . Note: To run the script on reboot, paste the following snippet and replace the “/home/user/reboot_message.sh” with the path of your scripts. Please note that not all versions of cron support the ‘@reboot’ option . | Using init.d | . | Make a script and put it in /etc/init.d/ Use the template below : . !/bin/sh case \"$1\" in start) # Executes our script sudo sh /home/user/script.sh ;; *) ;; esac exit 0 . | . ",
    "url": "/_docs/linux.html#running-scripts-at-startup",
    
    "relUrl": "/_docs/linux.html#running-scripts-at-startup"
  },"22": {
    "doc": "Linux",
    "title": "Xrandr",
    "content": ". | Configuration | . Note: Put xrandr configurations in ~/.xprofile . | Move monitor to the right of another xrandr --output &lt;DISPLAY-OUTPUT-1&gt; --right-of &lt;DISPLAY-TWO-2&gt; . | . Note : if you’re unsure which display output to use, run the xrandr command once to see all available displays to choose . | Change refresh rate of monitor xrandr --output &lt;DISPLAY-OUTPUT&gt; --mode &lt;DISPLAY-RESOLUTION&gt; --rate &lt;REF-RATE&gt; . | . Note: Put this line in the ~/.xprofile file for configuration on startup ( happens late in the boot process ) . | Change background picture with feh . | Set wallpaper with Feh feh --bg-fill /home/user/something.jpg . | Then put this line in your ~/.xinitrc file ~/.fehbg &amp; . | . | . Note: create a ~/.fehbg file with your feh command . ",
    "url": "/_docs/linux.html#xrandr",
    
    "relUrl": "/_docs/linux.html#xrandr"
  },"23": {
    "doc": "Linux",
    "title": "nmcli &amp; Networking",
    "content": ". | Check for openports netstat -tulnp ss -tulnp . | Change subnet mask of existing connection using nmcli . | Bring up interface manually using ip tool sudo ip link &lt;interface&gt; up . | Show service being used by specific port lsof -i tcp:80 lsof -i :80 . | . Note: This example prints out processes using the “80” port which is commonly used for HTTP . | Remove Secondary IP for host nmcli con mod &lt;con-name&gt; -ipv4.addresses \"&lt;IP&gt;\" . | Add Wifi Connection nmcli device wifi connect &lt;AP name&gt; password &lt;password&gt; . | Create new network connection in nmcli nmcli con add con-name static ifname ens18 autoconnect no type ethernet ip4 10.0.0.10/24 gw4 10.0.0.1 ipv4.method manual . | Bring up network connection with nmcli nmcli con up &lt;con-name&gt; . | Switch to DHCP with nmcli nmcli con up dhcp . | Change connection to not connect automatically with nmcli nmcli con mod &lt;con-name&gt; connection.autoconnect no . | Add DNS server to connection with nmcli nmcli con mod &lt;con-name&gt; ipv4.dns &lt;dns-server-ip&gt; . | To add additional dns servers nmcli con mod &lt;con-name&gt; +ipv4.dns 8.8.8.8 . | Change IP for existing connection in nmcli nmcli con mod &lt;con-name&gt; ipv4.addresses &lt;ip-address&gt;/&lt;CIDR-prefix&gt; . | Add secondary IP addresses with nmcli nmcli con mod &lt;con-name&gt; +ipv4.addresses &lt;new-ip&gt;/&lt;CIDR-prefix&gt; . | After chaning any properties to a connection you must re-activate the connection nmcli con up &lt;con-name&gt; . | . ",
    "url": "/_docs/linux.html#nmcli--networking",
    
    "relUrl": "/_docs/linux.html#nmcli--networking"
  },"24": {
    "doc": "Linux",
    "title": "Packet Capturing",
    "content": " ",
    "url": "/_docs/linux.html#packet-capturing",
    
    "relUrl": "/_docs/linux.html#packet-capturing"
  },"25": {
    "doc": "Linux",
    "title": "Tshark",
    "content": ". | Capture traffic on specified interface tshark -i &lt;interface&gt; . | Capture &amp; Save traffic on specified interface to a file tshark -i &lt;interface&gt; -w capture.pcap . | View capture from file tshark -r capture.pcap . | Search for specific port in capture tshark -r path_to_file.pcap -Y \"tcp.port == 6881 || tcp.port == 6889 || tcp.port == 51413\" . | . ",
    "url": "/_docs/linux.html#tshark",
    
    "relUrl": "/_docs/linux.html#tshark"
  },"26": {
    "doc": "Linux",
    "title": "TCPDUMP",
    "content": ". | Search for specific port in capture sudo tcpdump -r path_to_file.pcap 'tcp port 6881 or tcp port 6889 or tcp port 51413' . To specify a port range . sudo tcpdump -r path_to_file.pcap 'tcp portrange 6881-6991' . | Check if Wake-on-LAN port is open tcpdump -i &lt;interface-name&gt; udp port 9 . | . ",
    "url": "/_docs/linux.html#tcpdump",
    
    "relUrl": "/_docs/linux.html#tcpdump"
  },"27": {
    "doc": "Linux",
    "title": "SELinux",
    "content": ". | Put SElinux into disabled mode in grub selinux=0 . | . Note: Put this line into your kernel boot args . | Put Selinux into enforcing mode in grub enforcing=0 . | . Note: Add this to kernel boot args . | View selinux config cat /etc/sysconfig/selinux . | Check what mode selinux is running getenforce . | Switch between selinux modes temporarily . | permissive mode setenforce 0 . | enforcingm mode setenforce 1 . | . | Switch modes persistantl | . Note: Modify /etc/sysconfig or add kernel boot arg . - Get status of selinux ```bash sestatus ``` . | Get selinux status setstatus -v . | Show context setttings . | using ls ls -Z . | using ps ps Zaux . | using ss ss -Ztul . | . | Setting Context types . | Add context type to manually created directories semanage fcontext -a -t &lt;contxt-type&gt; \"/mydir\" . | Apply policy settings restorecon -R -v /mydir . | . | Help with setting contexts man semanage-fcontext . | Finding context types dnf -y install selinux-policy-package man -k _selinux . | . Note: Install selinux-policy-doc package . | Enable ssh port in SELinux semanage port -a -t ssh_port_t -p tcp PORTNUMBER . | Relabel entire filesytem restorecon -Rv / . | Create .autorelabel after modifications /.autorelabel . | . | . Note: This works after server restart, afterwards the file will be removed . | Managing Port Access . | Example: Changing port of apache semanage port -a -t http_port_t -p tcp 8008 . | Template semanage port -a -t &lt;context-type&gt; -p &lt;tcp/udp&gt; &lt;port&gt; . | . | . Note: Run restorecon when finished to apply changes. | Using Boolean Settings to Modify SELinux Settings . | Get list of booleans on system getsebool -a semanage boolean -l . | Change Boolean example setsebool ftpd_anon_write on . | Template setsebool &lt;context-rule&gt; &lt;on/off&gt; . | . | Apply permanant changes to boolean setsebool -P . | Diagnosing and Addressing SELinux Policy Violations . | audit log | . | . Note: The audit log is stored in /var/log/audit/audit.log.Messages are logged with the type=AVC in the log.You can search for these messages through grep . | Search audit messages in Grep grep AVC /var/log/audit/audit.log . | . Note: “avc: denied { map } “ indicates a map request was denied , therefore some process tried to read attributes of a file and that was denied. Thus triggering a policy violation. In this logging , the scontext is the source context while the tcontext is the target context . | Making SELinux Analyzing Easier . | Download the sealert command dnf -y install setroubleshoot-server . | . | . Note: Once finished downloading ,restart your server.Then you can grep for entries from sealert. | Grep for sealert entries journalctl | grep sealert . | . Note: From the info you get , you might see a command it recommends to run to see further info. | Check sealert logging sealert -l &lt;SOME-ID&gt; . | . Note: Sometimes the logging will even recommend other commands to run in order to fix the issue, take these commands with a grain of salt unless you know what you are doing .These recommendations will have a confidence score . | Key topics about selinux . | newly created files inherit the context settings from the parent directory . | copied files do this as well. | . | . ",
    "url": "/_docs/linux.html#selinux",
    
    "relUrl": "/_docs/linux.html#selinux"
  },"28": {
    "doc": "Linux",
    "title": "DNF",
    "content": ". | Search for RPM’s of specific tool dnf whatprovides */semanage dnf whatprovides . | Undo recent download dnf history undo &lt;ID&gt; . | . ",
    "url": "/_docs/linux.html#dnf",
    
    "relUrl": "/_docs/linux.html#dnf"
  },"29": {
    "doc": "Linux",
    "title": "Adguard Home",
    "content": ". | Error: “X” Service is blocked ! . | Log onto your adguard home page and click on the Blocked by Filters button | . | . 2. Then search for the domain you would like to block . 3. Select the side menu on the right hand side and click \"Unblock\" . And after that you’re done ! . ",
    "url": "/_docs/linux.html#adguard-home",
    
    "relUrl": "/_docs/linux.html#adguard-home"
  },"30": {
    "doc": "Linux",
    "title": "Firewalld",
    "content": ". | View all available services firewall-cmd --get-services . | Get default zone firewall-cmd --get-default-zone . | Get available zones firewall-cmd --get-zones . | View all ports for specific zone ( with formatted output ) firewall-cmd --zone=&lt;zone-name&gt; --list-ports | tr ' ' '\\n' | column . | List services firewall-cmd --list-services . | List services enabled in zone firewall-cmd --list-all --zone=public . | Add port to firewalld permanently firewall-cmd --add-port=2020/tcp --permanent . | Add service to firewalld firewall-cmd --add-service=vnc-server --permanent . | Reload firewalld firewall-cmd --reload . | Write configs to runtime firewall-cmd --runtime-to-permanent . | Add source IP firewall-cmd --add-source=&lt;ipaddress/netmask&gt; . | . ",
    "url": "/_docs/linux.html#firewalld",
    
    "relUrl": "/_docs/linux.html#firewalld"
  },"31": {
    "doc": "Linux",
    "title": "NFS",
    "content": ". | Setup NFS on RHEL 9 . | Create nfs directory to be shared mkdir -p /nfsdata /users/user1 /users/user2 . | Create /etc/exports file and assign the following /nfsdata *(rw,no_root_squash) /users *(rw,no_root_squash) . | Install the cifs-utils package dnf install -y nfs-utils . | Add the nfs , rcp-bind, and mountd services to firewall firewall-cmd --add-service nfs --permanent ; firewall-cmd --add-service rpc-bind ; firewall-cmd --add-service mountd --permanent . | Then reload the firewall-cmd config firewall-cmd --reload . | . | List available mounts from IP or hostname showmount -e &lt;IP-or-hostname&gt; . | Perform pseudo root mount mount &lt;Ip-Or-hostname&gt;:/ /mnt . | . ",
    "url": "/_docs/linux.html#nfs",
    
    "relUrl": "/_docs/linux.html#nfs"
  },"32": {
    "doc": "Linux",
    "title": "NTP",
    "content": ". | Turn on NTP timedatectl set-ntp 1 . | Convert epoch time to human time date --date '@1720893005 . | Show the current system day of month, month , and year date +%d-%m-%y . | Set the current time 3 minutes past 4 pm date -s 16:03 . | Synchronize curent system time to the hardware clock hwclock --systohc . | Synchronize current hardware time to the system clock hwclock --hctosys . | Show current time settings status . | Set current time set-time TIME . | Set timezone set-timezone ZONE . | Show a list of all time zones list-timezone . | Control whether to use RTC ( hardware clock ) set-local-rtc [0|1] . | Control whether NTP is enabled set-ntp [0|1] . | . Note: timedatectl is used to switch on NTP time , it talks to the chronyd process . ",
    "url": "/_docs/linux.html#ntp",
    
    "relUrl": "/_docs/linux.html#ntp"
  },"33": {
    "doc": "Linux",
    "title": "Podman",
    "content": ". | Run container in detached mode podman run -d nginx . | Run container in TTY mode podman run -it nginx /bin/sh . | View running containers podman ps . | View all inactive and active containers podman ps -a . | Attach to running container podman attach &lt;name&gt; . | Stop running container podman stop &lt;name&gt; . | Search which registries are currently used podman info . | Filter images in search podman search --filter official=true alpine or podman search --filter stars=5 alpine . | Pull image podman pull &lt;image&gt; . | Build custom image podman build -t imagename:tag -f /path/to/Containerfile . | Example podman build -t mymap:1.0 . | . | Verify custom image was built podman images . | Remove images with None tag podman image prune . | Send SIGTERM signal to the container , bash podman stop | . Note : If no results after 10 seconds , the SIGKILL signal is sent. | Kill container podman kill . | . Note: Immediately sends the SIGKILL command . | Restart container podman restart . | Remove container podman rm . | . Note: Removes container files written to the writable layer . | Run container and delete container files automatically podman run --rm . | Running Commands inside containers podman exec mycontainer uname -r . | TTY MODE podman exec -it mycontainer /bin/bash . | . | Managing Container Ports | . podman run --name nginxport -d -p 8080:80 nginx . Note: Ports 1-1024 are accessible by the root user only. To run a container with port forwarding , run the following command below. This would allow the nginx process to access host port 8080 and forward to standard http port 80 .After adding the port , don’t forget to add the port to your firewall . | Managing Container Environment Variables | . For containers such as mariadb , you will need to supply the container with environment variables. For example the mariadb container needs the password for the root user. Some containers contain a “usage” line that may say how the container needs to run with environment variables included. However this is not always the case, you can check the container with podman inspect to see if it’s there. - Mariadb container example ```bash podman run -d -e MYSQL_ROOT_PASSWORD=password -e MYSQL_USER=anna ``` . | Managing Container storage | . Note: If you want to save the changes made in the writable layer , you will need to configure persistant storage. You can do this by adding a bind-mount from the host OS into the container, this is used instead of a block device . There are 2 requirements to doing this however : . | The host directory must be writable for the user account that runs the container | The appropriate SELinux context label must be set to container_file_t | . Note: The bind-mount dir must be OWNED by the user that runs the container. - Configure bind mount to be owned by running user ```bash semanage fcontext -a -t container_file_t \"hostdir(/.*)?\"; restorecon ``` - To do so automatically ```bash -v host_dir:container_dir ``` - If root container or if user is owner of the container ```bash -v host_dir:container_dir:Z ``` . | Set directory ownership on bind-mounted directories for rootless containers . | Find UID of the user that runs the container main app podman inspect imagename . | set the container UID as the owner of the directory on the host podman unshare chown nn:nn dirname . | . | . Note: To set the container UID as the owner of the directory on the host. This directory must be in the rootless user home dir. Otherwise it woulden’t be apart of the user namespace. 3. Verify the user ID mapping ```bash podman unshare /cat/proc/self/uid_map ``` 4. Verify that the mapped user is owner on the host ```bash ls -ld ~/dirname ``` . | Running Containers as Systemd Services . | Generate Systemd unit for container podman generate systemd --name mycontainer --files . | Create this dir and CD to it, then run podman generate . | Enable container as Systemd service systemctl --user enable containe-mycontainer.service . | . | . Note: The Container file must be generated in the ~/.config/systemd/user/directory . ",
    "url": "/_docs/linux.html#podman",
    
    "relUrl": "/_docs/linux.html#podman"
  },"34": {
    "doc": "Linux",
    "title": "Package management with DNF",
    "content": ". | Add installation disk as repo . | Add repo file using config-maanger dnf config-manager --add-repo=file:///repo/filename . | Then locate the repo in /etc/yum.conf.d . | add the ‘gpgcheck=0’ to the file | . | . ",
    "url": "/_docs/linux.html#package-management-with-dnf",
    
    "relUrl": "/_docs/linux.html#package-management-with-dnf"
  },"35": {
    "doc": "Linux",
    "title": "Logical Volume Managment",
    "content": ". | View volume groups extent size vgdisplay . | Create VG with specified extent size vgcreate myvg /dev/sdx -s 8MiB . | . Note: The example above creates a volume group with a Physical Extent size of 8-MiB . | Create logical volume with specific size lvcreate -n lvdata -l 50%FREE vgdata or lvcreate -n lvdata . | . ",
    "url": "/_docs/linux.html#logical-volume-managment",
    
    "relUrl": "/_docs/linux.html#logical-volume-managment"
  },"36": {
    "doc": "Linux",
    "title": "CIFS",
    "content": ". | Enable CIFS mounts for user . | Set the SUID perm on these binaries [ /bin/mount, /bin/umount ,/user/sbin/mount.cifs ] sudo chmod u+s /bin/mount /bin/umount /usr/sbin/mount.cifs . | . | CIFS default ports . | . CIFS uses ports 138 for clients , 139 &amp; 445 for servers . ",
    "url": "/_docs/linux.html#cifs",
    
    "relUrl": "/_docs/linux.html#cifs"
  },"37": {
    "doc": "Linux",
    "title": "NMAP",
    "content": ". | Scan for all IP’s on your network with nmap nmap -sn 192.168.0.0/24 . | . Note: You can substitute the ip in the command above for one or multiple networks The ‘-sn’ option tells nmap to not search for open ports . | Check if certain port is open nmap &lt;ip&gt;&lt;prefix&gt; -p &lt;port-number&gt; . | If you know the port the service might be using lsof -i :&lt;port&gt; . | Using Netstat sudo netstat -nlp | grep &lt;port-number&gt; . | . | . ",
    "url": "/_docs/linux.html#nmap",
    
    "relUrl": "/_docs/linux.html#nmap"
  },"38": {
    "doc": "Linux",
    "title": "GRUB",
    "content": ". | Re-add windows to grub 2 boot menu | Enable os-prober . | Open grub config on local host sudo vim /etc/default/grub . | Add the following line to the end of the file GRUB_DISABLE_OS_PROBER=false . | Once you are done , update grub config ( Ubuntu ) sudo update-grub . | . | Error : “Unable to mount root fs on unknown block” | . | Check grub config for image Check the configuration of the target in the grub menu , if the root filesystem is pointed to a “/dev/sda” drive, this is likely the issue. In general you want to use UUID’s as they are hard coded identifiers for each specific drive. | Update GRUB config . | . Find the UUID of the drive where your root filesystem is mounted, add this UUID into your grub config under “GRUB_CMDLINE_LINUX_DEFAULT” or “GRUB_CMDLINE_LINUX”. Replace the value within with the UUID of the drive. Note : os-prober is disabled by default on ubuntu for security, this is most likely why your grub is not showing your windows installation if you’re dual booting. | Reset root password without access to wheel group . | Boot into GRUB boot args . | Remove the “rhgb” and “quiet” from the options . | add “init=/bin/bash” . | then mount the filesystem as writable mount -o remount,rw / . | Then change the password for root with passwd root . | Then enable SELinux relabeling on next boot touch /.autorelabel . | then reboot the system /usr/sbin/reboot -f . | . | . ",
    "url": "/_docs/linux.html#grub",
    
    "relUrl": "/_docs/linux.html#grub"
  },"39": {
    "doc": "Linux",
    "title": "User management",
    "content": ". | View user ID id -u &lt;username&gt; . | Change password validity to 90 days passwd -n 30 -w 3 -x 90 username . | Change password validity to 90 days using chage chage -E 2025-12-31 username . | . Note: The “-n” sets minimal usage period “-w” sets the days the user will be warned before their password expires “-x” sets the amount of days until the password expires You can also do this with chage by setting an exact date . | find the amount of days until the password expires chage -l username . Note: You can also do the same by viewing the /etc/passwd file . | Change default password expiration . | open the /etc/login.defs file . | change PASS_MAX_DAYS to the number of days before the password expires . | . | Add default directories for newly created users . | Cd to /etc/skel directory cd /etc/skel . | Modify the .bashrc file in /etc/skel | . | . Note: This bashrc will now be used for all created users . | Change default UUID for new users . | Open /etc/login.defs . | Locate and modify the two lines below . UID_MIN 1000 UID_MAX 60000 . | . | View what groups a user is apart of lid username . | Change home directory of user with usermod usermod -d /home/NEW-DIR/ *username* or usermod -m -d /home/NEW-DIR/ *username* . | . Note: You can use the -m option to move the contents of the users current home directory to the newly created home directory. | Add user to group usermod -aG &lt;group-name&gt; &lt;username&gt; . | Change UID of user usermod -u &lt;NEWUID&gt; username . | Configure user to be unable to start interactive shell usermod -s /sbin/nologin username . | Change group owner of dir chown -R :groupname /dirname . | Change permissions for group on dir chmod g+rwx /dirname . | . Note: This example allows full access to the dir for the group members . | Configure dir where new files are owned by group . | Set the SGID on the directory chmod g+s /dir . Note: This change configures /dir to assign all newly created files to the group of the user . | . | Change username of user usermod -l [new_user] [old_user] or sudo usermod -l faruk -d /home/faruk -m pardus . | Update GRUB config grub2-mkconfig -o /boot/grub2/grub.cfg grub2-mkconfig -o /boot/efi/EFI/almalinux/grub.cfg grub2-mkconfig -o /boot/efi/EFI/redhat/grub.cfg . | Reset root password | . | Add init=/bin/sh in GRUB kernel boot args . | Remount filesystem for writing mount -rw -o remount / . | Use passwd to change pass passwd root . | Create autolabel file touch /.autorelabel . | . ",
    "url": "/_docs/linux.html#user-management",
    
    "relUrl": "/_docs/linux.html#user-management"
  },"40": {
    "doc": "Linux",
    "title": "Common errors and small fixes",
    "content": ". | Error: org.bluz.Error.NotReady . | Using the rfkill tool sudo rfkill unblock all . | . | . ",
    "url": "/_docs/linux.html#common-errors-and-small-fixes",
    
    "relUrl": "/_docs/linux.html#common-errors-and-small-fixes"
  },"41": {
    "doc": "Linux",
    "title": "Docker",
    "content": ". | Connect docker container to network docker network connect &lt;network-name&gt; &lt;container-name-or-id&gt; . | View docker network configuration . docker network inspect &lt;container-id-or-name&gt; . | Create docker network docker network create &lt;network-name&gt; . | Re-Attach to docker container docker attach &lt;container-id-or-name&gt; . | Attach with bash TTY docker exec -it &lt;container-id-or-name&gt; /bin/bash . to detach , press CTRL + P followed by CTRL + Q . | Change configuration of apache web container . | list docker networks | . sudo docker network ls . | delete all docker containers | . docker rm vf $(docker ps -a -q) . | Add bind mount to docker container docker run -v /var/something/something:/var/container/something something . You can use the “-v” option when making bind mounts the left operand is the file path of a directory on your local machine , the other operand is where that path will be mounted to in the containers file system . | Stop Docker compose run ( in parent directory ) docker compose down . | Stop specified docker compose run docker compose -f /path/to/compose.yml down . | Connect container to protonvpn container using Docker Compose In your compose.yml file , add the following . | Start bash TTY in container docker exec -it &lt;container-id&gt; /bin/bash . | . ",
    "url": "/_docs/linux.html#docker",
    
    "relUrl": "/_docs/linux.html#docker"
  },"42": {
    "doc": "Linux",
    "title": "Sed",
    "content": ". | Add text to specific line with sed sed -e '/auth-user-pass/ s/$/ \\/opt\\/scripts\\/login.conf/' ./* . | Replace /bin/sh with /bin/bash for all files in a dir sed -i 's/\\#!\\/bin\\/sh/\\#!\\/bin\\/bash/g' * . | . ",
    "url": "/_docs/linux.html#sed",
    
    "relUrl": "/_docs/linux.html#sed"
  },"43": {
    "doc": "Linux",
    "title": "Oracle SBC",
    "content": ". | Show all sip agents sho sipd agents . | Show configuration for specified agent sho configuration session-agent &lt;AGENT-NAME&gt; sh . | . ",
    "url": "/_docs/linux.html#oracle-sbc",
    
    "relUrl": "/_docs/linux.html#oracle-sbc"
  },"44": {
    "doc": "Linux",
    "title": "TrueNAS",
    "content": ". | Restart ssh service midclt call service.restart \"ssh\" . | . ",
    "url": "/_docs/linux.html#truenas",
    
    "relUrl": "/_docs/linux.html#truenas"
  },"45": {
    "doc": "Linux",
    "title": "Grep",
    "content": ". | Grep for specific file extension grep \".*\\.md . | . Note: Replace “md” with whichever extension you are trying to grep for. | Grep for certain word in entire directory grep -rni \"string\" * . | . ",
    "url": "/_docs/linux.html#grep",
    
    "relUrl": "/_docs/linux.html#grep"
  },"46": {
    "doc": "Linux",
    "title": "Unzip",
    "content": "unzip all zip files in directory . unzip \\*.zip . ",
    "url": "/_docs/linux.html#unzip",
    
    "relUrl": "/_docs/linux.html#unzip"
  },"47": {
    "doc": "Linux",
    "title": "Display Management",
    "content": "check what display manager you are using . On Debian/Ubuntu using X11 : . cat /etc/X11/default-display-manager . or . dpkg -l | grep -E 'gnome|kde|xfce|lxde|mate' . On Redhat : . cat /etc/sysconfig/desktop . rpm -qa | grep -E 'gnome|kde|xfce|lxde|mate' . Check current display session: . echo $DESKTOP_SESSION . Check process list for running DE : . ps -e | grep -E 'gnome|kde|xfce|lxde|mate' . check what compositor you are using . sudo apt install -y inxi . inxi -Gxx | grep compositor . ",
    "url": "/_docs/linux.html#display-management",
    
    "relUrl": "/_docs/linux.html#display-management"
  },"48": {
    "doc": "Linux",
    "title": "Git",
    "content": ". | Get upstream URL for local branch git rev-parse --abbrev-ref --symbolic-full-name @{u} . | Get remote branches from git repo git ls-remote --heads &lt;repo-url&gt; . | Clone specifc remote branch to local git clone -b branch-name &lt;repo-url&gt; . | Delete remote branch on local machine git push origin --delete branch-name . | Create new local branch and add to remote git checkout -b &lt;branch-name&gt; git branch -u origin &lt;branch-name&gt; git push -u origin &lt;branch-name&gt; . | Change URL used for “origin” remote git remote set-url origin &lt;link-here&gt; . | Ignore vim swap files *~ . | . Note: Add this to your .gitignore and commit changes . | Cache ( store ) git credentials git config credential.helper store . | Reset all changes made on branch to HEAD git reset --hard HEAD . | . ",
    "url": "/_docs/linux.html#git",
    
    "relUrl": "/_docs/linux.html#git"
  },"49": {
    "doc": "Linux",
    "title": "Xorg",
    "content": "Make desktop shortcut for application . If you’re on GNOME , you can make a shortcut using the gnome-desktop-item-edit tool . gnome-desktop-item-edit ~/.local/share/applicationsj --create-new . You will need to do this if you would like the application to show up in the GNOME search menu. Create a file for the shortcut located in /usr/share/applications. Create file with *.desktop extension . Use the template below to create your shortcut . Or you can do it manually by using this template for the *.desktop file . [Deskktop Entry] Encoding=UTF-8 Version=1.0 # version of an app. Name[en_US]=yEd # name of an app. GenericName=GUI Port Scanner # longer name of an app. Exec=java -jar /opt/yed-3.11.1/yed.jar # command used to launch an app. Terminal=false # whether an app requires to be run in a terminal. Icon[en_US]=/opt/yed-3.11.1/icons/yicon32.png # location of icon file. Type=Application # type. Categories=Application;Network;Security; # categories in which this app should be listed. Comment[en_US]=yEd Graph Editor # comment which appears as a tooltip. disable sleep / suspend on xorg . Create the /etc/systemd/sleep.conf.d/nosuspend.conf file . Add these lines to the file . [Sleep] AllowSuspend=no AllowHibernation=no AllowSuspendThenHibernate=no AllowHybridSleep=no . create . /etc/X11/xorg.conf.d/10-extensions.conf . Then put this into the conf file . Section \"Extensions\" Option \"DPMS\" \"false\" EndSection . ",
    "url": "/_docs/linux.html#xorg",
    
    "relUrl": "/_docs/linux.html#xorg"
  },"50": {
    "doc": "Linux",
    "title": "Rclone",
    "content": "copy files from source to dest . rlcone copy /source/dir mydrive:/drive/dir . ",
    "url": "/_docs/linux.html#rclone",
    
    "relUrl": "/_docs/linux.html#rclone"
  },"51": {
    "doc": "Linux",
    "title": "Du",
    "content": "show all files in current directory size in different units The 3 lines below shows the sizes in kilobytes . du -k * . du --block-size=1K * . du -B 1K * . ",
    "url": "/_docs/linux.html#du",
    
    "relUrl": "/_docs/linux.html#du"
  },"52": {
    "doc": "Linux",
    "title": "Note",
    "content": ". | You can substitute the ‘k’ for other letters which represent other file size units : M,K,G,T,E,Z,Y | . | List largest files in current directory | . du . | sort -nr | head -n10 . | List largest directories in current directory | . du -s * | sort -nr | head -n10 . | List disk size of all dotfiles du -sh .??* . | Exclude files below a certain size threshhold du -t 1K . | Exclude files above a certain size threshhold du -t -1K . | . Note : Read the Du manual under the SIZE section for valid formats for the threshhold size . ",
    "url": "/_docs/linux.html#note",
    
    "relUrl": "/_docs/linux.html#note"
  },"53": {
    "doc": "Linux",
    "title": "Ranger",
    "content": "hidden files config . Open up ~/.config/ranger/rc.conf ( or where ever your config file is located ) . ",
    "url": "/_docs/linux.html#ranger",
    
    "relUrl": "/_docs/linux.html#ranger"
  },"54": {
    "doc": "Linux",
    "title": "Add this line :",
    "content": "set show_hidden true . ",
    "url": "/_docs/linux.html#add-this-line-",
    
    "relUrl": "/_docs/linux.html#add-this-line-"
  },"55": {
    "doc": "Linux",
    "title": "Markdown",
    "content": "Markdown table template . | Left Align (default) | Center Align | Right Align | :------------------- | :----------: | ----------: | React.js | Node.js | MySQL | Next.js | Express | MongoDB | Vue.js | Nest.js | Redis | . Output : . | Left Align (default) | Center Align | Right Align | . | React.js | Node.js | MySQL | . | Next.js | Express | MongoDB | . | Vue.js | Nest.js | Redis | . ",
    "url": "/_docs/linux.html#markdown",
    
    "relUrl": "/_docs/linux.html#markdown"
  },"56": {
    "doc": "Linux",
    "title": "Youtube downloading",
    "content": "download only the transcript . yt-dlp --verbose --skip-download --write-subs --write-auto-subs --sub-lang en --sub-format ttml --convert-subs srt --output \"transcript.%(ext)s\" &lt;PUT-URL-HERE&gt; &amp;&amp; sed -i '' -e '/^[0-9][0-9]:[0-9][0-9]:[0-9][0-9].[0-9][0-9][0-9] --&gt; [0-9][0-9]:[0-9][0-9]:[0-9][0-9].[0-9][0-9][0-9]$/d' -e '/^[[:digit:]]\\{1,3\\}$/d' -e 's/&lt;[^&gt;]*&gt;//g' ./transcript.en.srt &amp;&amp; sed -e 's/&lt;[^&gt;]*&gt;//g' -e '/^[[:space:]]*$/d' transcript.en.srt &gt; output.txt &amp;&amp; rm transcript.en.srt . ",
    "url": "/_docs/linux.html#youtube-downloading",
    
    "relUrl": "/_docs/linux.html#youtube-downloading"
  },"57": {
    "doc": "Linux",
    "title": "Serial Communication",
    "content": ". | No /dev/ttyUSBx showing for connected serial cable . | Check if proper drivers are loaded lsmod | grep -E 'ch341|ftdi_sio' . | If output from previous command is blank , load drivers using modprobe sudo modprobe ch341 sudo modprobe ftdi_sio . | Install usbutils package sudo apt install usbutils . | run dmesg and re-plug cable dmesg | tail -n 20 . | . | . ",
    "url": "/_docs/linux.html#serial-communication",
    
    "relUrl": "/_docs/linux.html#serial-communication"
  },"58": {
    "doc": "Linux",
    "title": "Jekyll",
    "content": ". | Generate Jekyll template project jekyll new &lt;name-of-project&gt; . | Host Jekyll site locally . | cd to project directory and install Dependencies bundle install . | Start Jekyll server and host locally bundle exec jekyll serve . | . | . Note : Site should be available at http://localhost:4000 . ",
    "url": "/_docs/linux.html#jekyll",
    
    "relUrl": "/_docs/linux.html#jekyll"
  },"59": {
    "doc": "Linux",
    "title": "ChatGPT CLI",
    "content": ". | Installation script curl -L -o chatgpt https://github.com/kardolus/chatgpt-cli/releases/latest/download/chatgpt-linux-amd64 &amp;&amp; chmod +x chatgpt &amp;&amp; sudo mv chatgpt /usr/local/bin/ . | . ",
    "url": "/_docs/linux.html#chatgpt-cli",
    
    "relUrl": "/_docs/linux.html#chatgpt-cli"
  },"60": {
    "doc": "Linux",
    "title": "Rust",
    "content": ". | Install Rust curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh . | . ",
    "url": "/_docs/linux.html#rust",
    
    "relUrl": "/_docs/linux.html#rust"
  },"61": {
    "doc": "Linux",
    "title": "Zsh",
    "content": " ",
    "url": "/_docs/linux.html#zsh",
    
    "relUrl": "/_docs/linux.html#zsh"
  },"62": {
    "doc": "Linux",
    "title": "Install ZSH",
    "content": ". | Using curl sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" . | Using wget sh -c \"$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" . | Using fetch sh -c \"$(fetch -o - https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" . | . Note: All of this was taken from the README.md for Zsh on their Github. I’ll paste a link below for easy reference . ",
    "url": "/_docs/linux.html#install-zsh",
    
    "relUrl": "/_docs/linux.html#install-zsh"
  },"63": {
    "doc": "Linux",
    "title": "Linux",
    "content": " ",
    "url": "/_docs/linux.html",
    
    "relUrl": "/_docs/linux.html"
  },"64": {
    "doc": "Change antigen theme",
    "title": "Change antigen theme",
    "content": "# Change antigen theme `antigen theme XX` ",
    "url": "/_docs/antigen.html",
    
    "relUrl": "/_docs/antigen.html"
  },"65": {
    "doc": "Autohotkey",
    "title": "Autohotkey",
    "content": "# Autohotkey **swap caps and ctrl** ``` CapsLock::Ctrl #If !GetKeyState(\"RAlt\") Ctrl::CapsLock #If ``` **swap caps and escape** `Capslock::Esc` ",
    "url": "/_docs/autohotkey.html",
    
    "relUrl": "/_docs/autohotkey.html"
  },"66": {
    "doc": "Bash Notes",
    "title": "Bash Notes",
    "content": "# Bash Notes This page is dedicated to info regarding bash scripting # Bash Conditionals Examples You can find a link to the GNU manual below. > Reference: ![GNU Bash Conditionals](https://www.gnu.org/software/bash/manual/html_node/Bash-Conditional-Expressions.html) ## 1. If-Else Conditional ### Syntax: ```bash if [ condition ]; then # Code to execute if condition is true elif [ another_condition ]; then # Code to execute if another_condition is true else # Code to execute if none of the above conditions are true fi ``` ### Example: ```bash #!/bin/bash num=10 if [ $num -gt 5 ]; then echo \"$num is greater than 5\" elif [ $num -eq 5 ]; then echo \"$num is equal to 5\" else echo \"$num is less than 5\" fi ``` --- ## 2. Comparison Operators ### Numeric Comparisons: | Operator | Description | Example |----------|-------------------------------|------------------------| `-eq` | Equal to | `[ $a -eq $b ]` | `-ne` | Not equal to | `[ $a -ne $b ]` | `-gt` | Greater than | `[ $a -gt $b ]` | `-ge` | Greater than or equal to | `[ $a -ge $b ]` | `-lt` | Less than | `[ $a -lt $b ]` | `-le` | Less than or equal to | `[ $a -le $b ]` | ### String Comparisons: | Operator | Description | Example |----------|-------------------------------|------------------------| `=` | Strings are equal | `[ \"$a\" = \"$b\" ]` | `!=` | Strings are not equal | `[ \"$a\" != \"$b\" ]` | `` | String is greater than | `[ \"$a\" \\> \"$b\" ]` | `-z` | String is empty | `[ -z \"$a\" ]` | `-n` | String is not empty | `[ -n \"$a\" ]` | --- ## 3. Logical Operators | Operator | Description | Example |----------|-------------------|----------------------------------| `!` | Logical NOT | `[ ! condition ]` | `&&` | Logical AND | `[ condition1 ] && [ condition2 ]` | `||` | Logical OR | `[ condition1 ] || [ condition2 ]` | ### Example: ```bash is_admin=true is_logged_in=true if [ \"$is_admin\" = \"true\" ] && [ \"$is_logged_in\" = \"true\" ]; then echo \"Access granted\" else echo \"Access denied\" fi ``` --- ## 4. Using `[[` for Advanced Conditions `[[` is more flexible than `[`. It supports pattern matching and avoids certain pitfalls. ### Example: ```bash str=\"Hello\" if [[ $str == H* ]]; then echo \"String starts with H\" fi ``` --- ## 5. Case Statement ### Syntax: ```bash case $variable in pattern1) # Code to execute if pattern1 matches ;; pattern2) # Code to execute if pattern2 matches ;; *) # Default case ;; esac ``` ### Example: ```bash #!/bin/bash fruit=\"apple\" case $fruit in apple) echo \"It's an apple!\" ;; banana) echo \"It's a banana!\" ;; *) echo \"Unknown fruit.\" ;; esac ``` --- ## 6. File Tests | Operator | Description | Example |----------|-----------------------------------|-------------------------| `-e` | File exists | `[ -e file ]` | `-f` | File exists and is a regular file| `[ -f file ]` | `-d` | Directory exists | `[ -d directory ]` | `-r` | File is readable | `[ -r file ]` | `-w` | File is writable | `[ -w file ]` | `-x` | File is executable | `[ -x file ]` | `-s` | File is not empty | `[ -s file ]` | ### Example: ```bash #!/bin/bash file=\"example.txt\" if [ -f \"$file\" ]; then echo \"$file exists and is a regular file.\" else echo \"$file does not exist.\" fi ``` --- ## Summary - Use **`if`**, **`case`**, and logical operators for branching. - Use **`[ ]`** or **`[[ ]]`** for conditions. - Combine numeric, string, and file tests as needed. These tools are the foundation of Bash scripting logic. --- # Bash Error Handling ## 1. Using `$?` (Exit Status) Every command in Bash returns an exit status: - **`0`**: Indicates success. - **Non-zero**: Indicates failure. ### Example: ```bash #!/bin/bash cp file.txt /nonexistent-directory if [ $? -ne 0 ]; then echo \"Error: Failed to copy file.\" fi ``` --- ## 2. `set` Built-In Command ### **`set -e`**: Exit on Error Automatically exits the script if a command returns a non-zero exit status. ```bash #!/bin/bash set -e echo \"This runs.\" cp file.txt /nonexistent-directory # Causes the script to exit echo \"This will not run.\" ``` ### **`set -u`**: Treat Undefined Variables as Errors Triggers an error if an undefined variable is used. ```bash #!/bin/bash set -u echo \"This is defined: $DEFINED_VAR\" ``` ### Common Combination: ```bash set -euo pipefail ``` - **`-e`**: Exit on error. - **`-u`**: Treat undefined variables as errors. - **`pipefail`**: Ensures the script fails if any command in a pipeline fails. --- ## 3. `trap` Command The `trap` command lets you handle signals and cleanup tasks. ### Example: Cleanup on Exit ```bash #!/bin/bash trap \"echo 'An error occurred. Exiting...'; exit 1\" ERR cp file.txt /nonexistent-directory # Error triggers trap echo \"This will not run.\" ``` ### Example: Cleanup Temporary Files ```bash #!/bin/bash trap \"rm -f /tmp/tempfile; echo 'Cleaned up.'\" EXIT touch /tmp/tempfile echo \"Doing work...\" ``` --- ## 4. Using `||` (OR) for Fallback Run an alternate command if the first one fails. ### Example: ```bash #!/bin/bash mkdir /example-directory || echo \"Failed to create directory.\" ``` --- ## 5. Using `if` Statements Manually check the success of commands. ### Example: ```bash #!/bin/bash if cp file.txt /nonexistent-directory; then echo \"File copied successfully.\" else echo \"Failed to copy file.\" fi ``` --- ## 6. Using Functions for Error Handling Encapsulate commands and error handling logic into functions. ### Example: ```bash #!/bin/bash error_exit() { echo \"Error: $1\" exit 1 } cp file.txt /nonexistent-directory || error_exit \"Failed to copy file.\" ``` --- ## 7. Combining `pipefail` with Pipelines By default, only the last command in a pipeline affects the exit status. Use `set -o pipefail` to fail the pipeline if any command fails. ### Example: ```bash #!/bin/bash set -o pipefail cat file.txt | grep \"text\" | sort || echo \"Pipeline failed.\" ``` --- ## 8. Redirecting Errors to a Log File Redirect error messages to a file for later inspection. ### Example: ```bash #!/bin/bash command 2> error.log ``` - **`2>`**: Redirects `stderr` (standard error). --- ## 9. Retry Logic Retry a command if it fails. ### Example: ```bash #!/bin/bash for i in {1..3}; do command && break || echo \"Attempt $i failed.\" sleep 1 done ``` --- ## 10. Error Messages with `>&2` Send error messages to `stderr`. ### Example: ```bash #!/bin/bash echo \"This is an error message.\" >&2 ``` --- ## Summary of Error Handling Techniques: - Use `$?` to check the exit status of commands. - Use `set -euo pipefail` for more robust scripts. - Use `trap` to handle unexpected errors and perform cleanup. - Redirect `stderr` to log files for debugging. These techniques can help make your Bash scripts more robust and capable of handling unexpected conditions. --- ## 11. Parameter expansion in bash Parameter expansion allows you to modify and manipulate the values of variables. ",
    "url": "/_docs/bash.html",
    
    "relUrl": "/_docs/bash.html"
  },"67": {
    "doc": "BitTorrent Guide",
    "title": "BitTorrent Guide",
    "content": "# BitTorrent Guide ## Introduction to BitTorrent BitTorrent is a peer-to-peer (P2P) file-sharing protocol used for distributing large amounts of data across the internet. It works by breaking down files into smaller chunks, allowing users to download and upload simultaneously from multiple sources, improving download speed and efficiency. ### Key Terms - **Torrent File**: A small file that contains metadata about the files to be shared and the network locations of peers. - **Seeder**: A user who has a complete file and shares it with others. - **Leecher**: A user who is downloading the file but may or may not have it completely. - **Swarm**: All the seeders and leechers connected for a specific torrent file. - **Tracker**: A server that helps BitTorrent clients find peers. ## Setting Up BitTorrent ### 1. Download a BitTorrent Client To start using BitTorrent, download a client, such as: - [qBittorrent](https://www.qbittorrent.org/) - [uTorrent](https://www.utorrent.com/) - [Transmission](https://transmissionbt.com/) Choose one that suits your operating system (Windows, macOS, Linux). ### 2. Install the Client Run the downloaded file and follow the installation instructions. Be sure to avoid optional adware or bundled software if prompted. ## Downloading Torrents ### Step 1: Find a Reliable Torrent Source - Use legitimate torrent sites like [Public Domain Torrents](http://www.publicdomaintorrents.info/) or [Internet Archive](https://archive.org/) for free, legal content. - Avoid suspicious or unauthorized sources to prevent downloading malicious content. ### Step 2: Download a Torrent File or Magnet Link - **Torrent File**: Download the `.torrent` file and open it in your client. - **Magnet Link**: Some sites provide magnet links. Click the link, and your BitTorrent client should open automatically. ### Step 3: Start the Download Once added to your client, the download should begin immediately. You’ll see the progress in percentage, along with details about seeders, leechers, and download/upload speeds. ## Uploading/Seeding Torrents After downloading a file, keep your torrent client open to \"seed\" the file. This helps others download and keeps the torrent alive. ## Tips for Using BitTorrent Safely and Efficiently ### Use a VPN BitTorrent traffic is usually not encrypted, so it’s wise to use a VPN (Virtual Private Network) for privacy. A VPN hides your IP address and encrypts your connection, adding a layer of security. ### Configure Client Settings - **Limit Upload/Download Speeds**: Go to your client settings to control speeds and prevent internet lag. - **Set Download Location**: Specify a folder where all torrents will be saved. ### Avoid Suspicious Files Avoid torrents with very few seeders, unknown formats, or suspicious file names (like `.exe` files disguised as movies or games). ## Frequently Asked Questions ### Is BitTorrent Legal? Yes, BitTorrent as a protocol is legal. However, sharing copyrighted material without permission may violate local laws. ### What’s the Difference Between a Torrent and a Magnet Link? A torrent file contains metadata about the files, while a magnet link uses a unique identifier to fetch the metadata directly from peers in the network. ### What Happens if I Don’t Seed? When you don’t seed, you limit the availability of the file for others. Although seeding is not mandatory, it's encouraged as a way of giving back to the community. --- # BitTorrent Protocol - Bittorrent has an advantage over HTTP is that files are downloaded concurrently , the downloaders are also uploading chunks of the file. This allows for multiple downloads to occur with only a slight increase in load ## How do peers upload to each other ? ## Distribution ### Web server #### 1. What is the web server for ? What content is hosted there ? #### 2. How do I configure apache to associate the .torrent extension with mimetype application/x-bittorrent ? #### 2.1 What are mimetypes and how do they pertain to the \\*.torrent file ? - MIME-types or Multipurpose Internet Mail Extensions types are identifiers used to tell the web server the format and data of a file. In the context of torrenting , the \"application/x-bittorrent\" MIME-Type is used to tell the web server how to interpret the file format. #### 3. Where do I put the metainfo file on the web server #### 4. Why do I need a tracker and a web server ? ### static metainfo file #### 1. How is this file used ? - This file contains the complete file to be served and the URL of the tracker being used. Metainfo files commonly use the \\*.torrent file extension. This file is then hosted on the web server. #### 2. Are there any tools I can use to automatically generate this file for me ? Yes , some clients have the functionality to generate the metainfo file for you. I will list some below and the steps to accomplish this. - qBittorrent, Deluge * In the client , navigate to Tools > Torrent Creator ![qbimg](/_docs/images/qbittorrent-tools.png) * After that , fill out the information for Trackers , Web Seed URL's , Path where the \\*.torrent file will be stored , and the Source files you would like to seed. ![qbimg](/_docs/images/torrent-creator.png) - CLI Utilities : mktorrent - Python , Libtorrent - Download bencode.py ```bash pip install bencode.py ``` > Note : If you encounter an issue with importing the library , specifically this error > ```bash > ModuleNotFoundError: No module named 'BTL' > ``` > The current PyPi package does not actually install the required 'bencode.py' file. To fix this make sure to run the command > as shown above with the \\*.py extension included #### 3. What does an example torrent file look like I downloaded the torrent file for Debian 12. Upon opening the file in a text editor , ( for this i'm using Vim ) at the very top I see a few UDP links to trackers the torrent would use. * Metainfo files are giant bencoded dictionaries ``` ``` ### BitTorrent Tracker #### 1. How do trackers facilitate connections between peers who want to download the same file ? #### 2. How can I setup my own tracker ? ### 'original' downloader #### 1. How can I start my own torrent and allow peers to download - I should have a tracker running - I should also have a web server such as apache - I should configure apache to associate the .torrent extension with mimetype application/x-bittorrent - I need to generate a metainfo file ( .torrent ) file for the torrent and include the torrent trackers and complete file - I need to add the metainfo (\\*.torrent ) file to the web server. - I then need to supply a link to this file on an external website - I then need to start a downloader which has the complete file ##### Summary In order to start hosting a file in BitTorrent. You essentially need a web server with the \\*.torrent file which will need to be associated with a mimetype x/ #### 2. What downloaders can I use to distribute the file ? ### End user web browsers ### End user downloaders #### How does a host download a torrent ? - Install a BitTorrent client - search the web for a link to a \\*.torrent file - select where to save the torrent file. - wait for the download to complete - After downloading the torrent may begin seeding. Seeding is NOT mandatory , however it serves the primary function of BitTorrent which allows other peers to share chunks of the downloaded file to other peers. There must be at least one peer that has the torrent fully downloaded and seeding to distribute the file. --- # How to host your own torrent using docker containers ## Web Server You will need to have a web server to host the \\*.torrent file. For this project , i'm going to use the supplied Apache docker container. - Pull docker container from Dockerhub ```bash docker pull httpd ``` - Run Docker container ( Without Dockerfile ) ```bash docker run -dit --name torrent-webserver -p 8080:80 -v \"$PWD\":/usr/local/apache2/htdocs/ httpd:2.4 ``` > **Note:All HTML files from /usr/local/apache2/htdocs will be mounted as a volume within the containers filesystem** - Run Docker container ( With Dockerfile ) 1. Create the following Dockerfile using your preferred editor in the folder of your project diretory ```bash FROM httpd:2.4 COPY ./public-html/ /usr/local/apache2/htdocs/ ``` > The './publc-html/' is a relative pathname to the directory which contains all HTML files to be added to your site 2. Build the container using the Dockerfile ```bash docker build -t my-server-image-name . docker run -dit --name my-container-name -p 8080:80 my-server-image-name ``` 3. Verify the container is running You can use curl to verify if the web server will respond ```bash curl -v http://localhost:8080 ``` - Associate \\*.torrent with mimetype application ",
    "url": "/_docs/bittorrent.html",
    
    "relUrl": "/_docs/bittorrent.html"
  },"68": {
    "doc": "Docker",
    "title": "Docker",
    "content": "# Docker ## Documenting my docker learning journey This section will not be organized in any particular way , my plan is to note any experiments or changes I make which I could reference for future deployments ## Docker notes * other containers in the same bridge network can reference each other by their container name for example : http://jellyfin:8096. This references the container named \"jellyfin\" and attempts to connect through port 8096. ## Goals - [ ] setup docker container for adguard home - [ ] setup docker container for jellyfin media-server - [ ] setup monitoring dashboard for all existing docker containers ",
    "url": "/_docs/docker.html",
    
    "relUrl": "/_docs/docker.html"
  },"69": {
    "doc": "Dotfiles",
    "title": "Dotfiles",
    "content": "# Dotfiles I found a helpful article on hacker news which is referenced in the arch wiki for tips on how to manage your dotfiles. The link is pasted below : [Arch Wiki](https://wiki.archlinux.org/title/Dotfiles) [Hackernews Article](https://news.ycombinator.com/item?id=11071754) # Notes for myself To configure this setup on a new machine , run the following commands ``` git clone --bare https://github.com/buhfur/dotfiles $HOME/.dotfiles alias dotfiles='/usr/bin/git --git-dir=\"$HOME/.dotfiles/\" --work-tree=\"$HOME\"' dotfiles checkout dotfiles config --local status.showUntrackedFiles no ``` I've even created a script to automate this process , you can find it in the install\\_scripts directory on my github. Or you can click the link below to download it. [Dotfile Script Link](../install_scripts/install_dotfiles.sh) --- **In order to utilize this setup , you will need to add your dotfiles to be tracked under the bare repo** ``` config status config add .vimrc config commit -m \"Add vimrc\" config add .config/redshift.con config commit -m \"Added redshift config \" config push ``` Someone else also made an article on this users approach to handling dotfiles , you may find this link below [Dotfiles: Best way to store in a bare git repository](https://www.atlassian.com/git/tutorials/dotfiles) ",
    "url": "/_docs/dotfiles.html",
    
    "relUrl": "/_docs/dotfiles.html"
  },"70": {
    "doc": "Fortigate Firewall configuration",
    "title": "Fortigate Firewall configuration",
    "content": "# Fortigate Firewall configuration ## Fortigate Firewall Configuration * Configured eero router DHCP/NAT seting to \"bridge\" mode * Remove internal5 & internal1 from hardware switch * Changed internal5 Alias to MGMT * Changed internal5 role to DMZ * Moved cable on fortigate internal5 to port 5 on dumb switch * Added HTTPS , SSH , PING to Administrative Acess section for internal5 * Configured IP/Network Mask * Enabled Device Detection on internal5 * Added 172.16.0.10/24 with gateway of 172.16.0.254 on my local machine > sudo nmcli connection add type ethernet con-name fortigate-mgmt ifname enp13s0 ip4 172.16.0.10/24 gw4 172.16.0.254 * Removed HTTP , HTTPS , SSH from all ports except MGMT * Configured IP for DMZ interface to 0.0.0.0/0.0.0.0 * Disabled DHCP server on DMZ interface * Changed DMZ interface to disabled * Configured addressing mode of WAN2 to \"manual\" * Configured address on Wan2 interface to 0.0.0.0/0.0.0.0 * Configured status of WAN2 to \"disabled\" * Changed HTTPS port to 8765 in System -> Settings * Changed hostname to \"buhfur-fortigate\" in Settings * Changed gateway on eno1 connection on local host to \"192.168.4.34\" * Created new IPv4 policy under Policy & Objects -> IPv4 Policy * Connected fortigate internal2 to port 4 on dumb switch * Created specific service for proxmox web ui and jellyyfin web ui * Changed services in Virtual Ip's from \"ALL\" to \"proxmox-webui\" and \"jellyfin-webui\" respectively ## IPv4 Policy * Changed Name to \"LAN to WAN \" * Set incoming interface to internal * Set outgoing interface to wan1 * Set Source to \"all\" * Set Destination to \"all\" * Schedule was pre-configured to \"always\" * Set Service to \"ALL\" * Action was pre-configured to \"ACCEPT\" * NAT was already enabled * Added new virtual IP for proxmox server on fortigate * Added new virtual IP for jellyfin-reverse-proxy * Created new IPv4 policy for jellyfin-reverse proxy * Configured IPv4 policy for jellyfin-reverse-proxy to only allow http service ## Port forwarding I believe I understand now why I was having issues connecting to my local hosts with forwarded ports. In the setup I was configuring the external IP to the public WAN IP given by my ISP. This was WRONG. The reason for this is that currently the fortigate is NOT acting as a DHCP server, relying on my router for that instead. Because of this the requests to forwarded ports using the public WAN IP went nowhere. - What I did to fix it * Configured the External IP to the IP shown on my router for the fortigate. I forwarded the ports mapped on the fortigate to the private LAN IP shown on my local network. That way the requests will reach the public IP , which will then forward the requests matching the forwarded ports to the internal NAT IP ( 192.168.4.146 ) which will then be forwarded properly through the fortigate to their respective hosts. I've attached a screenshot of the configuration options I used to set all this up. ![pic-ref](virt-ip-setup.png) ## Fixing local internet For some reason my router encounters issues when playing around with the DHCP settings. After disabling bridge mode my eero started showing the infamous red light - Steps taken to resolve * unplugged ONT cable from modem * Power cycled modem > Note : When I mean \"modem\" i'm talking about the eero router ## Accessing Fortigate webui using nmcli 1. Open TUI 2. edit existing ethernet connection 3. Under addresses in IPv4 Configuration , Add an IP within the subnet of the WebUI's subnet , in this case , the IP configured for the WebUI is 172.16.0.254 , I added the 172.16.0.10/24 to the existing IP's. View the screenshot below of my current config shown in nmtui ![pic-of-config](/_docs/images/nmtui-config.png) > Note: You don't need a separate gateway or additional route added to access the webui , all you need to do is add the internal IP in the same subnet as the webui. ## Forwarding proxmox webui port to be accessible from outside network ## Questions ### Should I use the router for DHCP or the firewall ? Generally this would be fine for smaller to mid size networks. For larger networks this may not be advantageous as this would put more load on the firewall. ",
    "url": "/_docs/firewall.html",
    
    "relUrl": "/_docs/firewall.html"
  },"71": {
    "doc": "General networking concepts",
    "title": "General networking concepts",
    "content": "# General networking concepts ## Noob stuff * Network Segment : > Portion of a network where all devices are directly connected and can communicate with one another without needing a router. A LAN , for example, is a singular network segment. And by LAN this could be either a layer 2 LAN or layer 3 LAN. * What are Subnets ? : > Subnets are individual network segments that share a common broadcast domain within a larger network. * What are broadcast domains ? > broadcast domains are network segments where any broadcast sent by a device will be received by all devices in the same network segment * What's the difference between a layer 2 LAN and layer 3 LAN : > Layer 2 LAN's reference devices which can communicate and reference one another using MAC addresses while Layer 3 LAN's do the same but using IP addresses instead. ## SPAN ( Switchport Port Analyzer ) * Allows you to copy the traffic from a singular port, group of ports, or VLAN to a port where a monitoring device is connected * Can be used by packet capturing software * Allows you to observe traffic patterns * For VoIP , you can use span ports to monitor RTP streams and check for latency or jitter # Broadcast forwarding * Allows forwarding broadcast traffic from one network segment to another ",
    "url": "/_docs/general_networking.html",
    
    "relUrl": "/_docs/general_networking.html"
  },"72": {
    "doc": "Git info",
    "title": "Git info",
    "content": "# Git info - remote branches use the \"main\" name as default unless it was created a while ago when they changed the default name from \"master\" to \"main\". **Store git credentials permanantly** `git config --global credential.helper store` **undo recent changes ( commits )** `git reset --hard HEAD` NOTE : This throws away all your recent uncommited changes **Create new local branch and push to remote repo** `git checkout -b ` Branch is automatically created when you push the branch to the remote server. Most times I substiute `` with \"origin\" `git push :` WARNING: DO NOT omit the `:` or the remote branch will be DELTED **Get branch name** `git rev-parse --abbrev-ref HEAD` **Push all local branches to remote** This is handy if you aren't sharing a repo with someone, I might use this more often than not since i'm a hobbyist with no partners on my projects. ( As of yet ) `git push --all -u` **Change default editor for commits** This sets the default editor to vim `git config --global core.editor vim` ",
    "url": "/_docs/git.html",
    
    "relUrl": "/_docs/git.html"
  },"73": {
    "doc": "Home network setup",
    "title": "Home network setup",
    "content": "# Home network setup ## Routers Eero: - IP : 192.168.4.1/255.255.255.0 - MAC : ## Firewalls Fortigate 61E ## Switches Dump switch ## Servers Proxmox ## Endpoints ## Modems/Gateways Eero Wifi Eero LAN Frontier Gateway ## IP addresses / ports ## WAN & LAN segments WAN : 50.104.85.108/24 LAN : 192.168.4.0/24 # Cabling / Wireless connections ## Hosts ",
    "url": "/_docs/home-net.html",
    
    "relUrl": "/_docs/home-net.html"
  },"74": {
    "doc": "Httpd configuration for linux",
    "title": "Httpd configuration for linux",
    "content": "# Httpd configuration for linux main config file is in /etc/httpd/conf/http.conf **DocumentRoot** Field in config file determines where apache should find the web servers contents.By default this is set to /var/www/html. **ServerRoot** This field determines where apache should look for it's config files , by default this is set to /etc/httpd --- Using alternative directories for apache config files is useful for applications to install drop-in files to be included by the apache server. The magic file is used by the browser to interpret how the contents of the web server should be displayed on diff browsers. /etc/httpd/conf.d contains files included in the main config file. This dir can be used by RPM to include Apache drop-in files. This also allows you add config files that define diff web pages without changing the main /etc/httpd/conf/httpd.conf **Adding new modules** You can add new modules by placing them in the /etc/httpd/conf.modules.d **Virtual hosts** virtual hosts use separate configuration files for unique hostnames To know which requests should go to an individual host, Apache reads the http header of requests to know which virtual host to request data from. Apache then reads the virtual host config to find the document root for the virtual host. Then the request is forwarded to the contents file in the document root for the virtual host. **default virtual host** If you're server is configured to use virtual hosts , you may need to setup an entry to direct requests that don't specify a virtual host. To do this , you can create a virtual host for _default_:80 If you don't packets that arrive through DNS are sent to the virtual host that the apache config finds first Virtual hosts use different hostnames but use the same IP of the apache server IP-based virtual hosts are required if the name of the web server must be resolved to a unique IP address. These hosts do require several IP addresses. These configurations are common with apache servers that are using TLS. **Guide to creating virtual hosts** Open up /etc/hosts and input the IP's and hostnames of your virtual hosts Then , create the virtual host configs in /etc/httpd/conf.d ``` ServerAdmin webmaster@account.example.com DocumentRoot /www/docs/account.example.com ServerName account.example.com ErrorLog logs/account.example.com-error_log CustomLog logs/account.example.com-access_log common ``` --- Then , create the directories corresponding to the DocumentRoot ",
    "url": "/_docs/httpd.html",
    
    "relUrl": "/_docs/httpd.html"
  },"75": {
    "doc": "I3 notes",
    "title": "I3 notes",
    "content": "# I3 notes **Reload changes made to i3 config** `i3-msg reload` `i3-msg restart` **Swap caps and left ctrl** Add this line to your i3 config `exec --no-startup-id \"setxkbmap -option ctrl:nocaps\"` **set wallpaper at launch** add this line into your i3 config `exec --no-startup-id feh --bg-scale '/home/adam/wallpaper/walllhaven-38762.jpg'` **install powerline fonts** Follow the instructions using this link below [powerline install instructions](https://powerline.readthedocs.io/en/latest/installation/linux.html#fonts-installation) **disable the trackpad** Find the ID of your trackpad with `xinput --list` , then put this line in your I3 config `exec xinput --disable ` **change rofi launcher theme** Modfiy the line below with the directory where your theme is installed `bindsym $mod+d exec rofi -show drun -theme ~/.local/share/rofi/themes/.rasi` **turn off suspend / sleep** Add this line to your i3 configuration file `exec xset -dpms` Add this line instead if you wanna turn off DPMS and screen blanking `xset s off -dpms` ",
    "url": "/_docs/i3.html",
    
    "relUrl": "/_docs/i3.html"
  },"76": {
    "doc": "Notes for trying to fix my keyboard",
    "title": "Notes for trying to fix my keyboard",
    "content": "# Notes for trying to fix my keyboard **Link for the manual is below:** [Link for the manual](https://www.manualslib.com/manual/3387033/Cidoo-Abm066.html#resources) Keyboard model : CIDOO ABM066 So I got this new ergonomic keyboard and I really like it, however the Win / Fn key is not working. I can see LED's shining through it. However I NEED the windows / Fn key to work in order to change the LED's and access basic linux and windows functions. # What i've tried so far What i've tried so far is using a voltmeter to check the current to make sure the PCB is unaffected. However I feature of this board is that it has foam inside it, therefore blocking the terminal connections on the PCB to read current. So in order to measure this a little bit more accurately , I will need to take off the whole keyboard and the foam in order to expose the PCB. Now I could simply just return it for a replacement, which would be the easy thing to do. But you see , I see this as a chance to work on a simple hardware project and see if I can actually fix some hardware. This will be a first for me , i've recently purchased a soldering iron so I won't back down from this challenge. Plus in life, it's better to learn how to repair certain things in the event one day a replacment is not available. I've also checked the switch itself in the board and was not able to see any issues with the switch itself , the pins look normal and i've even swapped out the switch with a cherry mx red switch and still no luck. I'm not sure if there's some setting I need to set or firmware on the keyboard I need to download in order for the windows key to working. Ok so there's some VIA software that allows you to configure your keyboard in real time, I might be able to check the windows key mapping there, in the manual I found online , it directs you to install the latest version of VIA on the link below **Link:** [link](https://github.com/WestBerryVIA/via-releases/releases) However the newest version of the software doesn't auto detect my keyboard , and there's no way to upload the .json file it directs you to install for the \"profile\" of the keyboard. What's cool is this is written in python3 so if I need to fix anything it shoulden't be too big of an ask. So i'm opting to actually download a prior version of the software instead , version 2.0.5 is demonstrated to work with the keyboard I have. Ok so it turns out the switch did in fact have a bent terminal lol. So now I can change the LED's So the key now works to change the LED's , however there is no real \"windows\" key on the keyboard yet, I bet it's a setting somewhere I just need to turn on. I'm just gonna say fuck it and use AutoHotKey on windows to rebind it for the time being cause I want to get to work. ",
    "url": "/_docs/keyboard.html",
    
    "relUrl": "/_docs/keyboard.html"
  },"77": {
    "doc": "Desktop environments in linux",
    "title": "Desktop environments in linux",
    "content": "# Desktop environments in linux ## View Desktop environments installed - Debian : ```bash dpkg --get-selections | grep -E 'gnome|kde|xfce|lxde|cinnamon|mate' ``` - RHEL ( Redhat , Fedora ) : ```bash rpm -qa | grep -E 'gnome|kde|xfce|lxde|cinnamon|mate' ``` - Arch based distros : ```bash pacman -Q | grep -E 'gnome|kde|xfce|lxde|cinnamon|mate' ``` ",
    "url": "/_docs/linux-desktop-environment.html",
    
    "relUrl": "/_docs/linux-desktop-environment.html"
  },"78": {
    "doc": "Linux file permissions",
    "title": "Linux file permissions",
    "content": "# Linux file permissions # Chmod table **Example:** ```bash chmod 600 file.txt ``` * With chmod you can set file permissions using a numerical value or a combination of symbols which represents the 3 permissions which can be assigned to the user, users group , or the \"others\" group. Each of the permissions in the 3 digits you see above translate to the following # chmod Numerical Permission Settings | Numerical Value | Symbolic Representation | Permissions for Owner | Permissions for Group | Permissions for Others | Example Usage |-----------------|-------------------------|-----------------------|-----------------------|------------------------|--------------------------------| 0 | --- | None | None | None | `chmod 000 file` (no access) | 1 | --x | Execute | None | None | `chmod 100 file` | 2 | -w- | Write | None | None | `chmod 200 file` | 3 | -wx | Write & Execute | None | None | `chmod 300 file` | 4 | r-- | Read | None | None | `chmod 400 file` | 5 | r-x | Read & Execute | None | None | `chmod 500 file` | 6 | rw- | Read & Write | None | None | `chmod 600 file` | 7 | rwx | Read, Write & Execute | None | None | `chmod 700 file` (full access for owner) | ## Common Full chmod Examples | Command | Numerical Value | Owner Permissions | Group Permissions | Other Permissions | Description |-----------------|-----------------|-------------------|-------------------|-------------------|--------------------------------------------------| `chmod 644 file`| 644 | rw- | r-- | r-- | Owner can read/write, others can read. | `chmod 755 file`| 755 | rwx | r-x | r-x | Owner has full access, others can read/execute. | `chmod 700 file`| 700 | rwx | --- | --- | Owner has full access, others have no access. | `chmod 600 file`| 600 | rw- | --- | --- | Owner can read/write, others have no access. | `chmod 777 file`| 777 | rwx | rwx | rwx | Everyone has full access (read, write, execute). | ## Explanation of Permissions - **r**: Read - **w**: Write - **x**: Execute The **numerical value** is represented as a combination of three numbers (e.g., `755`), each specifying the permissions for the **owner**, **group**, and **others**. - The first digit is for **owner**. - The second digit is for **group**. - The third digit is for **others**. ### Numerical Values: - **0**: No permissions - **1**: Execute (`--x`) - **2**: Write (`-w-`) - **3**: Write & Execute (`-wx`) - **4**: Read (`r--`) - **5**: Read & Execute (`r-x`) - **6**: Read & Write (`rw-`) - **7**: Read, Write & Execute (`rwx`) ",
    "url": "/_docs/linux_file_permissions.html",
    
    "relUrl": "/_docs/linux_file_permissions.html"
  },"79": {
    "doc": "Linux Networking",
    "title": "Linux Networking",
    "content": "# Linux Networking In this article i'm currently trying to learn most of the in's and out's of networking in linux. From the driver loaded in the kernel all the way up to a TCP packet. My interest comes from my passion to understand how my system REALLY works. That may sound quite exaggerated , and it is...but nonetheless I love to strive to understand what my system is currently doing to use the most revolutionary system humans have done with computers ( besides quantum computing , but that's another topic for another time ;) ). Anywho , these are my random notes and scribblings while trying to climb further down the Linux rabbit hole. --- # NIC to Memory The NIC has a driver that allows it to communicate with the kernel. This acts as a glue between the linux networking stack and the physical network device. When the physical device receives a packet, its driver receives an interrupt , the interrupt handler for this is the very driver mentioned earlier. Here is a diagram of what a packet looks like from memory to the NIC driver. ![image](/_docs/images/memtopack.png) ",
    "url": "/_docs/linux_networking.html",
    
    "relUrl": "/_docs/linux_networking.html"
  },"80": {
    "doc": "notes about setting up lvm’s",
    "title": "notes about setting up lvm’s",
    "content": "# notes about setting up lvm's ",
    "url": "/_docs/lvm.html",
    
    "relUrl": "/_docs/lvm.html"
  },"81": {
    "doc": "Network Manager",
    "title": "Network Manager",
    "content": "# Network Manager ## Enable wake on LAN for machine 1. Navigate to /etc/NetworkManager/system-connections 2. Find the file which matches the network interface you are using 3. Open the file in your editor of choice 4. The connection file might look something like this > Note: To check if the network interface supports Wake on LAN , use the command : `ethtool ` and look for the **\"Supports Wake-on :\"** line in the output ## Wake on LAN notes * Wake on LAN allows you to power on a computer remotely. It does this by receiving \"Magic packets\" which are received by the host. * Magic packets use UDP port 9 * If you are attempting to trigger Wake on LAN from outside the LAN , you will need to forward UDP port 9 and enable broadcast forwarding. Broadcast forwarding is disabled in most routers by default for security reasons * IMPORTANT: If you allow port 9/udp on a host , you WILL NOT see the port open if you attempt a port scan using nmap. However this will send a packet to the host using port 9. What you need to do is run wireshark or tcpdump on the interface and listen for port 9 using the command below ```bash sudo tcpdump -i udp port 9 -w wol.pcap ``` ",
    "url": "/_docs/network-manager.html",
    
    "relUrl": "/_docs/network-manager.html"
  },"82": {
    "doc": "Networking",
    "title": "Networking",
    "content": "# Networking This page is dedicated to all my notes / research dedicated to learning the foundational concepts of computer networking. My intention with this page is to serve as a reference while working on my hypervisor and implementing new tools / technologies to make my setup more complex in what it can do. # Autonegotiation Autonegotiation is a feature that allows a port on a router / server / switch / server to negotiate with the device on the other end of a link to determine the best duplex setting and speed. A driver then configures the interface to the values negotiated for the link. There are two parameters I mentioned before for negotiation. Those two being the speed and the duplex setting. Speeds are negotiated in Megabits per second ( Mbps ). in multiples of 10 ( 10 , 100 , 1000 , 10000). Duplex determines how data flows on the device , half duplex means that only one side can trasmit data while the other cannot. Full duplex means that both sides can transmit & receive data at the same time. There is a common misconception about autonegotiation, that being the misconception that autonegotiation configures the other host on the opposite side of the link. Autonegotiation only works if BOTH sides of the link are implementing autonegotiation. If both sides aren't using autonegotiate , then autonegotiate cannot determine the speed / duplex of the switch. If both sides are using autonegotiate , then one device advertises the speed / duplex to the other device on the link. The configuration is done on the hosts that have the feature enabled. There is a common issue with autonegotiation being \"parallel detection\" which is enabled once autonegotiation fails to find autonegotiation running on the other side of the link. Parallel detection works by sending a signal to the 10Base-T , 100Base-TX , 100Base-T4 drivers on the switch. If any of the drivers detect the signal , the interface is set to the speed mentioned on the signal. Keep in mind, parallel detection only changes the speed on the interface and **NOT** the duplex. You should keep this in mind as the way duplex is set differs based on the ethernet standard used. ## 10Base-T Originally designed without full-duplex support. Some do , but most do not. ## 100Base-T Has always had fully supported full-duplex however, by default however the standard will use half-duplex until set manually. ## 1000Base-T This standard has more support for autonegotiation. In general links using this standard should be left to autonegotiate. ## 10 Gigabit Links using this standard are more dependent on fiber transcievers or specialized copper connectors which dictates how 10G connects. on a 6500 switch they usually require XENPAKS which only run at 10G. --- When using 10Base-T & 100Base-T , after autonegotiation fails and activates the parallel detection feature, the driver sets the interface to half-duplex. When autonegotiation fails on a 10/100 link, you will commonly see the collisions counter increase on the half-duplex side due to one side being 10/100 half while the other side is 10/100 full. On the half-duplex side the TX side is monitoring the RX side. If a packets is being received on the RX side the TX will wait until the frame is processed before transmitting again. In this scenario if the network is busy the half-duplex side may not have the chance to trasmit any frames if the full-duplex side is constantly trasmitting. # Configuring Autonegotiation On cisco switches, autonegotiation is enabled by default. In order to set the duplex first the link must have a set speed. You may configure the duplex for a Cisco switch using the command below `(config-if)#duplex [half|full|auto] ` You may configure the speed using the command below `(config-if)#speed [10|100|1000|auto]` --- # VLANS VLANS are configured to virtually separate a switch into distinct LAN's that treat each VLAN as if it were connected to its own physical switch. In theory a frame intended for one VLAN should not be able to reach the other VLANS. However , there are exploits to get around this. There are two known exploits for circumventing the virtual separation of VLAN's on a switch. The type of attack is dubbed \"VLAN Hopping\" and there are two methods to achieve this. ## Switch spoofing In a switch spoofing attack , an attacker imitates a trunking switch by using the tagging and trunking protocols used for maintaining the VLAN. I will put a link to the two most common protocols used at the bottom of this paragraph. [Multiple VLAN Registration Protocol](https://en.wikipedia.org/wiki/Multiple_VLAN_Registration_Protocol) [IEEE 802.1Q](https://en.wikipedia.org/wiki/IEEE_802.1Q) [Dynamic Trunking Protocol](https://en.wikipedia.org/wiki/Dynamic_Trunking_Protocol) Attackers take advantage of default configurations for DTP. Any switch port configured as DTP auto will receive DTP packets generated by the attackers device. Once the DTP packet is received by the DTP configured port on the switch , it will be configured as a trunk port and accept traffic for any VLAN on the trunk. This would then allow the attacker to send packets to any VLAN on the negotiated trunk. ## Double Tagging Double tagging allows an attacker to send a frame to a destination VLAN other than the source VLAN. In a scenario , the attacker is currently on VLAN 10 and sends a packet with the outer header being set to \"VLAN 10\". The frame is forwarded by the first switch as \"VLAN 10\" matches the trunk port associated. Once the packet hits the 2nd switch the second header is read as \"VLAN 20\" and forwarded through all ports matching the \"VLAN 20\" ID in the inner header. --- # Connecting VLANS In order for a host on VLAN 1 to forward frames to host2 on VLAN 2 , an external router may be used to accomplish this. To do this , the router must be connected to a port on each VLAN in order to facilitate communication. However, as a networks scales to add more switches , there is another solution for interconnecting VLAN's. To do this , you may use trunking. VLAN trunks are links that carry traffic for more than one VLAN. Trunk ports are not assigned a VLAN. If you want to route traffic between all the VLAN's , you can use a \"router-on-a-stick\" approach , to do this you would connect a router to a trunk port on the switch. The only limitation with this setup is the bandwidth on the trunk port used. Often the port may be a 10 Mbps link which isn't optimal. Sometimes you will see a similar approach except instead of router you would use a firewall. Keep in mind this approach only applies to Layer 2 switches, layer 3 switches have a router built in which you could use to route traffic between all VLAN's. --- # Configuring VLAN's Some Cisco switch models like the 2950 and the 3550 come equiped with a VLAN database which has an entirely separate configuration than the switch. This was an older feature on Cisco switches. However newer models allow you to manage the VLAN's from the CLI --- # Trunking A trunk is an interface or link that can carry frames for more than one VLAN. Trunks are used to facilitate communication between two devices in the same VLAN on anoother switche. They can act as a metaphorical bridge to another switch's ports in the same VLAN. Trunking is not related to purely switches and can even be setup on routers / firewalls and other devices. When a switch receives a frame from a trunk port , it views the reference to the intended VLAN. This reference is stored in a header utilizing the Inter Switch Link( ISL) or 802.1Q protocol. Some swithes may not support the ISL protocol and may have to use the 802.1Q protocol. There are some differences between the two protocols and how they treat the ethernet frame. ISL encapsulates frames inside it's own ISL fram while 802.1Q alters the ethernet frame and adds a VLAN tag header You can see a picture of a 802.1Q frame below ![packet](/_docs/images/802.png) --- # Proxies - What is a Reverse Proxy ? * Forwards requests from servers to clients * Hides IP of server. * Reduce latency through caching * Can compress outgoing requests , reducing bandwidth * DDoS mitigation * Load balancing > Note: A reverse proxy is a proxy that sits between a client and a server. The reverse proxy forwards requests from a server to a client. - What is a Proxy? > Note: A regular proxy sits between a client and server and forwards requests from the client to the server. --- # SLIP : Serial line over IP * used in microcontrollers * replaced by PPP ( Point-to-Point protocol ) * Encapsulates data from serial ports and routers * small overhead compared to PPP --- # NAT Reflection ( NAT Hairpinning ) * Allows hosts on a LAN to access each other through an external IP ( public IP , WAN IP ) ",
    "url": "/_docs/networking.html",
    
    "relUrl": "/_docs/networking.html"
  },"83": {
    "doc": "Kill switch configuration",
    "title": "Kill switch configuration",
    "content": "# Kill switch configuration The protonvpn killswitch exists to secure your connection in the event of an unexpected connection drop. There are two modes for the killswitch : - Block access on local LAN , best used for public wifi - Allow access on local LAN , used for home networks Since my hypervisor is bridging the network interface for the virtual machines, I don't think option 1 would be a problem # Test out killswitch functionality [link to reddit post](https://www.reddit.com/r/ProtonVPN/comments/eljquu/how_to_activate_protonvpncli_app_builtin/) I found a very helpful reddit thread about adding the killswitch functionality to the CLI In this thread someone posted about how to trigger the killswitch functionality for testing reasons. To trigger the killswitch , just kill the OpenVPN process being used by the VPN. `sudo pkill openvpn` ",
    "url": "/_docs/protonvpn.html",
    
    "relUrl": "/_docs/protonvpn.html"
  },"84": {
    "doc": "Proxmox notes",
    "title": "Proxmox notes",
    "content": "# Proxmox notes This document represents the changelog for my proxmox hypervisor # 10/13/2024 * Added all private IP's of hosts on local network to truenas allowlist for pool1 & pool2 * Removed torrentfunk, torlock , and idope.se from Jackett indexers * Removed torlock , and idope.se from sonarr indexers * Removed broken torrent for Rick And Morty Season 2 * Changed share settings on pool1 under \"Purpose\" , changed from 'Default Share Parameters' to 'No Presets' # 10/23/2024 * Unblocked protonvpn.com in adguard home * Unblocked vpn-api.proton.me in adguard home * updated adguard blocklists * turned off mouse for tmux on buhfurpc * removed ca-22.protonvpn.tcp.conf & ca-49.protonvpn.udp.conf from torrent server openvpn connections * added new protonvpn openvpn country UDP configs to torrent-server and rebooted # 10/27/2024 * commented out pool1 entry in fstab on jellyfin host * Disabled NTLMv1 Auth as this is a vulnerable protocol * Updated backup.service to be started after smbd.service & network.service to prevent the backup service from failing in the event the server is restarted and then attempts to run the scheduled backup . * Changed /etc/fstab on proxmox root to remount-rw if there are any errors mounting the smb shares # 10/28/2024 * Added x-systemd.automount to /etc/fstab on proxmox root in an attempt to ensure the server has access before attempting to backup * also added the prior mentioned fstab option to apply to pool2 as well. # 11/1/2024 * converted deluge to a docker container * setup protonvpn docker container * bridged deluge and protonvpn docker containers together on the \"torrent-bridge\" network * configured incoming address on deluge container to docker bridge network IP * Increased torrent-servers scsi0 disk size to 102G # 11/2/2024 * Removed torrent-server & jellyfin Vm's * Created media-server vm * Configured media-server vm to use 5192 for ssh connections # 11/4/2024 * truenas ip set to : 192.168.3.192 * media-server ip set to : 192.168.3.191 * dns-server ip set to : 192.168.3.190 * Updated fstab to new truenas IP # 11/9/2024 * changed ip of ens18 connection on redhat vm , changed to 192.168.3.104/22 # 11/29/2024 * Added encrypted firefox passwords to backups truenas share under /mnt/backups/backups/passwords. File is a CSV file which has been encrypted using openssl. Openssl will be needed to encrypt the password in the future ",
    "url": "/_docs/proxmox.html",
    
    "relUrl": "/_docs/proxmox.html"
  },"85": {
    "doc": "Random notes for random things",
    "title": "Random notes for random things",
    "content": "# Random notes for random things # Create script to add set of trackers to jackett & sonarr & radarr Tracker json file directories : * /home/radarr/.config/Jackett/Indexers * # Samsung knox vulns CVE-2021-25391 ",
    "url": "/_docs/random.html",
    
    "relUrl": "/_docs/random.html"
  },"86": {
    "doc": "Notes about RHCSA",
    "title": "Notes about RHCSA",
    "content": "# Notes about RHCSA # Mananging disks In this chapter , which I accidentally deleted by accident....fucking fat fingered my vim keybinds. Anywho... This is how you can manage disks on RHEL 9 ! # Step one : Finding out which type of disk parition you would like to use There's two types of partitions you can make , the first being an MBR partition table. ## MBR MBR stands for Master Boot Record. It's an old partitioning scheme from the 80's which was meant to be read by your BIOS and loaded. This would allow you to actually boot your computer ! Withtin the Master Boot Record is a bootloader and a partition table. The bootloader for your computer by the way is the first 512 bytes of code that loads your OS( kernel ) into memory. You can create an MBR partitioning table by using fdisk. Run the command and select your disk **Example** `$ fdisk /dev/sdx` Side note : replace /dev/sdx with the name of your device in the options , select \"p\" for primary partition , use the default first sector , enter +1G for a one gibibyte partition You can change the type of partition by using the \"t\" option , by default the parititon type is set to Linux Once you are done , write your changes to disk with \"w\". You can add extensible partitions which can contain logical partitions which can then be used to create filesystems on them. You cannot create a filesystem on an extensible partition on it's own ! To do this do the following : Use the \"n\" option to create a new partition. Then use the \"e\" option to create an extensible partition. # Advanced troubleshooting Here below I will put some notes while studying the following chapters to see if I retain any info I jot down here. I'm going to edit the grub2 config to increase the timeout so I can access it for longer periods of time. I've opened up another vm for learning about troubleshooting grub 2. You can modify some of the options during boot. Press 'e' to view the command line args that will be passed to your system at boot. Here are some options you can add to the command args and what they do: rd.break = stops boot procedure in the initramfs stage. This also means that the root filesystem is not mounted yet. init=/bin/sh or init=/bin/bash -> specifies that the shell should be started after loading the kernel and initd. Provides earliest possible access to a running system. Only the root fs is mounted and it's mounted as read-only # Rescue disk If you are unable to boot from disk , you will more than likely see a blinking cursor. If not , regardless you should be able to use a rescue disk. The rescue disk is apart of the installation disk that comes with RHEL. If you can't boot from GRUB , try the \"Boot from a Local Drive\" option which allows you to boot your machine using a bootloader that is installed to disk When using the Rescue a Red Hat Entrpriese Linux system , the distro should detect your other installation of RHEL. From there you will be able to access the filesystem your distro is installed on /mnt/sysimage. from there you can chroot to the filesystem in /mnt/sysimage `chroot /mnt/sysimage` Once you are in the root directory of the rescue disk , you can re-install grub2 if you need to. To do this run the following commands below `grub2-install /dev/sdx` If you're initramfs is broken , you can use dracut to fix it. This command creates a new initramfs for the currently loaded kernel. config files for dracuc are stored in /etc/dracut.conf.d You can tell if the initramfs is messed up since the root filesystem will never be mounted. Nor will you see any systemd units started. To fix it using dracut just run the following command: `dracut --force ` If there's something wrong with the fstab file and you need to access the filesystem( in the event you can't for some reason ) you can use the command below to remount the root filesystem `mount -o remount,rw /` This remounts the root fs with the 'rw' and the 'remount' mount options. # Resetting / forgetting the root password 1. Start system with init=/bin/bash arg in grub boot menu command line. 2. `mount -o remount,rw / ` 3. `passwd root` 4. `exec /usr/lib/systemd/systemd` And that is how you can change the root password IF systemd is not started , you can use a similar command to step 4 `exec /usr/lib/sytemd/system` # Bash scripting Arguments used in bash scripts can be referenced by a $1-9 character For example , if you have a script something.bash name1 name2 Name1 would be $1 and name2 would be $2 \"$#\" represents the number of arguments you have entered \"$@\" refers to all arguments used when starting the script. You can use the \"read\" command to query the user for input To add a timestamp to something , you can use the following command and add it to a variable TODAY=$(date +%d-%m-%y) Most of the syntax for bash scripting is straight forward , with the added exception of the until statement , which acts like a do while loop Note : don't use spaces in between the '=' sign and the declaration of the variable Also put spaces in between conditional brackets ## Debugging bash scripts To debug a script and find out what it's doing , you can run the `bash -x script.bash` command which will tell you what code is being run. And any errors that might occur during runtime. # Configuring SSH dictionary attacks are commonly used to break into ssh servers , from what i've seen on my machine they typically use usernames and passwords that might be setup by default on the server. These are things you can do to harden your ssh server - Disable root login ( disabled by default) - Disable password login ( not disabled by default ) - Configure a non-default port for SSH ( already done for most of my servers ) - Allow specific users only to login to ssh ( I haven't done this yet ) To configure these things , you can make all configuration changes in the /etc/ssh/sshd_config file. This config file is the default config used for an ssh server. ## Config option for disallowing the root user to login to ssh PermitRootLogin prohibit-password This only allows the root user to login if they have a valid pub/private key pair ## Changing default ssh port Edit config file in /etc/ssh/sshd_config Add port to SELinux label `semanage port -a -t ssh_port_t -p tcp ` Allow port through firewall-cmd `firewall-cmd --add-port=/tcp --permanent ` Then reload the configuration for the service `systemctl reload sshd` Then reload the firewall-cmd config `firewall-cmd --reload` You shoulden't really use the MaxAuthTries option since it's suseptible to ddos attacks. When this option is enabled it locks out the specified user trying to login. So someone could just try to login as that usera bunch to lock up the account. It's still good for monitoring security events as this option starts logging the failed attempts. Logs are written to the AUTHPRIV syslog utility. By default it writes the logs to /var/log/secure ## Restriciting which users can login to your ssh server You can enable access to your server by the usernames of the users. To do this , you must add the AllowUsers field in the /etc/ssh/sshd_config file ## Other useful sshd options UseDNS -> Very inefficient if other users connections are slow , turn off for performance. This option verifies remote hostname is same as remote address MaxSessions -> specifies max number of sessions from the same remote IP. If you have users connecting to the server with multiple sessions it's a good practice to increase the amount of max sessions. TCPKeepAlive -> ensures clients that are unavailable are released ClientALiveInterval -> time before the server sends a packet to the client when no activity is detected. ClientAliveCountMax -> specifies how many of these packets are sent. if set to 30 and ClientAliveCountMax is set to 10 , connections are kept alive for about 5 minutes. The two options above can only be used for the server side of ssh connections. You can try using two options for clients which try to do the same thing ServerAliveInterval & ServerAliveCountMax modify the ~/.ssh/config for local users I'd also like to note other options that are used with ssh as well HostBasedAuthentication -> Allows only users who's keys are already present in /etc/ssh/ssh_known_hosts. To enable this , add the key in the users .ssh/authorized_keys and copy it over to the directory mentioned previously. ## Key locations Client/Sever public/private keys -> /etc/ssh Clients pub pri key -> /home/user/.ssh ## Key pair authentication Generate public / private key `ssh-keygen` Then copy the key over to your server , make sure password auth is enabled `ssh-copy-id -p 1234 user@192.1.1.1` If you set a passphrase , cache the passphrase to save time `ssh-agent /bin/bash` `ssh-add` You can set a passphrase for the private key which is in most cases more secure, however it is inconveinient for the user as they will have to enter this key everytime they attempt to connect to the server. However you can cache the key for a short amount of time using the ssh-agent and ssh-add commands. To do so , see below # SELinux SELinux prevents system calls from being executed unless allowed. In selinux you have policies which contain rules that specify what source domain is allowed to access which target domain You have to be root user to use any of the commands Check all active ports on SELinux `semange port -l` The names listed for these ports are labels , for example the label for the SSH port is ssh_port_t. The label relates to the service and port used. If you want to change the port for an existing label , you must modify the port listed on the label. Source domains can be a port or a process. Target domains could be a file , directory , or network port labels define access rules also called context labels SELinux has two modes, enforcing mode , and permissive mode. IN enforcing mode, SELinux is fully operational and enforces all rules in the polic in permissive mode, activity is logged however no access is blocked to any services so this mode isn't really secure Logging messages are written to /var/log/audit/audit.log you can change the mode for selinux in /etc/sysconfig/selinux On RHEL , by default the setting is set to enforcing To put selinux in disabled mode on RHEL 9 , you need to change the kernel boot argument to selinux=0 , you can also set permissive mode in the kernel boot options as well with enforcing=0 You can use setenforce to check what mode selinux is in , you can switch between the two modes by specifying a number that relates to the mode Set permissive mode `setenforce 0 ` Set enforce mode `setenforce 1` This only changes the mode temporarily , to keep the changes you will need to write it to /etc/sysconfig/selinux You can also check the status of selinux with the sestatus command `sestatus -v ` If anyone tells you you need to disable selinux for an application , they're wrong as a policy can be added for any application. you can use `sepolicy generate` to generate a new policy for an application ## Context labels Files and directories Ports Processes Users Context labels define the nature of the object. Rules are created to match context labels of source objects ( or source domains ) to labels of target objects ( target domains ) So setting up these labels correctly is very important as mismatching context labels can cause alot of issues with selinux. Make sure you know about context types as they are important for the exam # Configuring a firewall firewall-cmd uses the netfilter subsystem , it allows kernel modules to inspect incoming , outgoing , or forwarded packets and either allow the packet or block it. iptables used to be the default firewall , however it has since been replaced by nftables. You can use the `nft` command to rules directly to nftables Firewalld is a system service that can configure firewall rules by using different interfaces. Apps can request ports to be opened by using the DBus messaging system. Without requireing any action from the sys admin. This allows apps to address the firewall from user space. firewall-cmd manages the firewalld system service **Understanding Firewalld Zones** a **zone** is a collection of rules that are applied to incoming packets matching a specific source address or network interface Firewalld applies to incoming packets by default , outgoing packets must be configured Zones are useful for servers that have multiple interfaces. Multiple zones allow you to set a specific set of rules for each interface. With servers with only one interface, you may only need 1 zone. This zone is already set by default , and if no zone is available , packets are handled through the default zone. **Firewalld default zones** ### Block incoming connections are rejected with an \"icmp-host-prohibited\". Only connections that were initiated on this system are allowed ### Dmz For use on computers in the demilitarized zone , only selected incoming connections are accepted, limited access to the internal network is allowed. ### Drop Any incoming packets are dropped and there is no reply. ### External For use on external networks with NAT enabled, used on routers. Only selected incoming packets are acccepted. ### Home For use with home networks , computers on the same network are truested and only selected incoming connections are accepted. ### Internal Most computers on the same network are trusted , only selected incoming connections are accepted. ### Public Other computers in the same network are not trusted, limited connections are accepted. Used as the default zone for newly created network interfaces. ### Trusted All network connections are accepted ### Work Most computers on the same network are trusted, only selected incoming connections are accepted. --- **Understanding Firewalld Services** Not the same as a service in systemd. A Firewalld service specifies what exactly should be accepted as incoming and outgoing traffic in the firewall. This typically includes ports to be opened and kernel modules that should be loaded XML files define the service. And they can be found in /usr/lib/firewalld/services By looking at the service file for git.xml , you can see the port being defined and the protocol used for the service. You can also use the `firewall-cmd --get-services` command to see what services are available Services are added to zones To add your own services , you can put the XML files in the /etc/firewalld/services directory. They will be automatically added once the firewalld service is restarted. **Working with Firewalld** Remember to commit changes to on-disk once you are finished On the exam , only use ports if no services contain the ports that you want to open. --- # NFS You should use NFS with an authentication service such as Lightweight Directory Access Protocol ( LDAP for short ) or kerberos **Setting up NFS** 1. Create local directory you would like to share 2. Edit the /etc/exports file to define NFS share 3. Start NFS server 4. Configure firewall to allow incoming NFS traffic If you encounter issues while mounting , keep in mind that NFSv4 may have issues with servers behind a firewall. Showmount relies on the portmapper service which uses random UDP ports to make a connection. Therefore if you have issues it may be due to the showmounts UDP port being blocked by the firewall. To circumvent this, you can simply perform a pseudo root mount on the **Mounting NFS Shares Through fstab** Add the following line : `server1:/share /nfs/mount/point nfs sync 0 0 ` **Using Automount to mount Remote File Systems** autofs supports wildcard mounts which are not supported by systemd unlike mount , no root perms are required You define mount points and the directory of the secondary file Example : `/nfsdata /etc/auto.nfsdata` automount works completely in user space The configurations for the mount are defined in the /etc/auto.nfsdata file you created In the secondary file you created, you define the subdir that will be created using a relative file name. In the example in the book , they are using the subdir \"files\" `files -rw server2:/nfsdata` Instead of \"server2\" you can also put the IP of the nfs host **Configuring Automount for NFS** 1. Install the autofs package 2. `showmount -e ` 3. edit the /etc/auto.nfsdata 4. `systemctl enable --now autofs` 5. cd /nfsdata/files 6. type mount **Using Wildcard in Automount** good for automounting home directories This allows you to store the home dir of a specific user on a central NFS server You can create a wildcard mount by specifying the mount in the secondary config file Example : `* -rw server2:/users/&` the \"\\*\" represents the local mount point while the \"\\&\" matches the item on the remote server you could usually mount the /home directory in the config , but that would mean other users can access each others home directories. Example auto.master file `/users /etc/auto.users` Example /etc/auto.users file `* -rw server2:/users/&` Example auto.home file which mounts each users home dir ``` #/etc/auto.home user1 server:/home/user1 user2 server:/home/user2 user3 server:/home/user3 ``` Exmaple auto.home mounting home dirs with wildcard mounts `* server:/home/&` --- # Configuring Time Services During boot, the hardware clock or the real-time clock (RTC) is read , which resides in the computer hardware. The time it defines is the \"hardware time\" The time on the hardware clock on linux servers is set to Coordinated Universal Time (UTC) System time is maintained by the OS , independent of the hardware clock When system time is changed , it's not synced with the harware clock. System time is kept in UTC . Apps convert system time into local time Local time is the actual timezone , Daylight Savings Time (DST ) is also considered so the accurate time will be displayed. Real Time Clock = same thing as a hardware clock **Using Network Time Protocol** Stratum defines the reliability of an NTP time source , the lower the stratum, the more reliable it is. Internet servers use stratum 1 or 2. You can use a higher stratum as a backup it's good practice to set stratum 5 on a local time server with a reliable hardware clock and stratum 8 on a server that is not reliable the /etc/chrony.conf file is a config file with a standard list of NTP servers on the internet. All you need to do is switch on NTP `timedatectl set-ntp 1` On linux , time is calculated as an offset of epoch time , Epoch time is the numebr of seconds since January 1, 1970 Timestamps in /var/log/audit/audit.log are in epoch time , not human time. To convert epoch time to human time , use the following command The epoch timestamp is in the \"msg=audit\" field in /var/log/audit/audit.log `date --date '@1720893005` There is a problem with epoch time however, on a 32-bit system , the number of seconds that can be counted in the field reserved for time notation will be exceeded in 2037. You can test this by attempting to set the time to 2050 64-bit systems however can notate time far into the twenty second century You can also use `date` to show time in different formats **Show the current system day of month, month , and year** `date +%d-%m-%y` **Set the current time 3 minutes past 4 pm** `date -s 16:03` **Using hwclock** `hwclock --systohc` - synchronizes curent system time to the hardware clock `hwclock --hctosys` - synchronizes current hardware time to the system clock **Using timedatectl** timedatectl , when used without any arguments the command shows you detailed info about the current time and date , it also shows the time zone you are in. **timedatectl commands** `status` - shows current time settings `set-time TIME` - sets the current time `set-timezone ZONE` - sets the current timezone `list-timezone` - shows a list of all time zones `set-local-rtc [0|1]` - controls whether the RTC ( hardware clock ) `set-ntp [0|1]` - Controls whether NTP is enabled timedatectl is used to switch on NTP time , it talks to the chronyd process Between linux servers , time is normally communicated in UTC to allow servers to use the same time settings **Setting the correct time zone** 1. Create a symbolic link to a file in the /usr/share/zoneinfo and name it /etc/localtime 2. Use the `tzselect` utility 3. use timedatectl **Configuring Time Service Clients** by default , chrony is configured to get the right time from the internet. Servers from pool.ntp.org are used. you can add your own local time servers to be used in the /etc/chrony.conf file **Configuring local NTP time client** 1. Comment out pool 2.rhel.pool.ntp.org 2. include the line `allow 192.168.0.0/16` to allow access from all clients that use a local IP address starting with 192.168 3. include the line `local stratum 8` to ensure your local time server will advertise itself with a stratum of 8 5. restart the chronyd service 6. add the ntp service to the firewall `firewall-cmd --add-service ntp --permanent` followed by `firewall-cmd --reload` 7. on the secondary server , add the hostname or IP of the NTP server to the clients config file. 8. restart the chronyd service 9. run `chronyc sources ` # Containers Container images contain all dependencies to run an application. Container runs on top of a container engine , the container is run from a container image. These container images are found in a container registry. To run containers , you need an OS that includes a conatiner engine , docker was used initially but it has since been replaced by CRI-o There are three tools you can use to manage containers podman - used to start, stop , and manage containers buildah - tool that helps you create custom images skopeo - tool used for managing and testing container images Containers are not always pure linux , although they do depend on a few features offered by the linux kernel Namely : * Namespaces for isolation between processes * Control groups for resource management * SELinux for security A namespace provides isolation for system resources , for example chroot jails, which presents the contents of a directory as it it is the root directory of your system. So process running in the chroot jail can't see anything but the contents of that directory. This stops the process from accessing other parts of the OS. chroot jails still exist , except now they are leveraged and part of what's called the **mount namespace** **Overview of namespaces** Mount - equivalent to chroot namespace , contents of a directory are presented in such a way that no other directories can be accessed Process - makes sure that processes running the this namespace cannot reach Network - Network namespaces can be compared to VLAN's. Nodes connected to a specific network namespace cannot see what is happening in other network namespaces. Contact to other Network namespaces is only possible through routers. User - used to separate user ID's and group ID's between namespaces. user accounts are specific to each namespace. Interprocess Communication (ipc) - what processes use to connect to one another, namespace ensures only connections can be made to processes in the same namespace. Network namespace is not enabled by default Control groups or Cgroups are a kernel feature that enables resource access limitation. By default , there is no restriction to the amount of memory of number of CPU cycles a process can access. These make it possible to limit the resources a container can use. With SELinux , a context label is added to ensure that containers can access only the resources they need access to and nothing else. **Containers on RHEL 9** Advantages over Docker with CRI-o: * containers can be started by ordinary users that do not need elevated privileges , called a rootless container. * When users start containers , they run in a user namespace where they are strictly isolated and not accesssible to other users. * Podman containers run on top of the lightwieght CRI-o container runtime , without needing any daemon to do work. * rootless containers do not have an IP address.As assigning an IP requires root perms * rootless containers cannot access components on the host OS that require root access * rootless containers can only bind to a non-privileged TCP or UDP port. * if rootless containers need access to host-based storage , the user who runs the container must be the owner of the directory that provides the storage. **Container Orchestration** When a host goes down , the containers will go down , however there are additional features to fix this * Easy connection to a range of external storage types * Secure access to sensitive data * Decoupling , site specific data is strictly separated from the code inside the container environment * Scalability , such that when workload increases , additional instances can easillybe added * Availability , ensuring that the outage of a container host doesn't result in container unavailability To implement these features , Kuberenetes was developed , redhat has it's own kubernetes distro called OpenShift. Which can build a scalable, flexible , reliable infra based on containers. **Running Containers** Install tools required for using containers `sudo dnf install container-tools` You can run your first container with `podman run` You supply the name of the container image you would like to run. You can specify the registry with `podman run` as well if you would like to select a specific one /bin/sh will usually be available in most container images Use Ctrl-P or Ctrl-Q to detach non-root container files are copied to ~/.local/share/containers/sotrage Average size for each container is about 60 MB container is a running instance of an image , while running a writable layer is added to store changes made to the container. Container images are created in the Docker format. **Using Registries** Continer registries are defined in the /etc/containers/registries.conf file Users hwo run a rootless container can create a file ~/.config/containers/registries.conf settings in the user-specific file will override settings in the generic file in registries.conf , all container registries are listed as unqualified-seach-registries , this is due to redhat requiring the complete image name and registry to avoid ambiguity. So instead of using : `podman run -d nginx` You use this : `podman run -d docker.io/library/nginx` **Finding Images** To find available images , you can use the `podman search` command j If you are trying to search for containers in Redhat registries , you will need to login using the `podman login` command with the registry name following the prior commands. You can filter the results with `podman search` by using the `--filter` args Example: `podman search --filter official=true alpine` `podman search --filter stars=5 alpine` You can also search for the UBI in the Redhat registries for an image UBI = Universal Base Image **Inspecting Images** You can inspect images using the spokeo tool `skopeo inspect ` Inspection happens from the registry without any need to pull the image You can inspect images on your local system by using the podman command `podman inspect` You can remove images by using the `podman rmi` command. You must stop all instances of a container image in order to remove it. **Building Images from a Containerfile** Conatinerfile is the same as a Dockerfile To build container images , you can use the `podman build` command Containerfile example : ``` FROM registry.access.redhat.com/ubi8/ubi:latest RUN dnf install nmap CMD [\"/usr/sbin/nmap\", \"-sn\", \"192.168.29.0/24\"] ``` THe FROM keyword identifies the base image to use RUN keyword specifies commands to run in the base image while building the custom image The CMD command specifies the default command that should be started by the custom image Alpine is a good base image to use as it is lightweight. **Manging Container Status** `podman stop` - sends SIGTERM signal to the container , if no results after 10 seconds , the SIGKILL signal is sent. `podman kill` - immediately sends the SIGKILL command `podman restart` - restarts container `podman rm` - removes container files written to the writable layer `podman run --rm` - runs the container and deletes container files automatically **Running Commands in a Container** You can run commands in the container using the `podman exec` command Command output is written to STDOUT **Open port for container** `podman run --name -d -p : ` Then add the port to your firewall and reload the config **Start container with env variables** Mariadb example: `podman run -d -e MYSQL_ROOT_PASSWORD=password -e MYSQL_USER=anna ` **Set persistant storage for container** `semanage fcontext -a -t container_file_t \"hostdir(/.*)?\"; restorecon` To do so automatically : `-v host_dir:container_dir` If root container or if user is owner of the container `-v host_dir:container_dir:Z` **Run commands inside container namespace** `podman unshare` **Map root user UID with current UID** `podman unshare cat /proc/self/uid_map` ",
    "url": "/_docs/rhcsa.html",
    
    "relUrl": "/_docs/rhcsa.html"
  },"87": {
    "doc": "Notes for RPM packages",
    "title": "Notes for RPM packages",
    "content": "# Notes for RPM packages Goal : Setup flameshot to be installed through dnf as a RPM package uses .rpm extension name format of a package --..rpm Flameshot package name --- flameshot-12-1.0.x86_64.rpm ",
    "url": "/_docs/rpm.html",
    
    "relUrl": "/_docs/rpm.html"
  },"88": {
    "doc": "Notes for advanced troubleshooting on RHEL",
    "title": "Notes for advanced troubleshooting on RHEL",
    "content": "# Notes for advanced troubleshooting on RHEL **Issues , how to configure, and what to configure** POST -> Hardware configuration : - best fix is to replace hardware Selecting boot device : - bios / uefi menu -> replace hardware or use rescue system Loading the bootloader -> use grub2-install to configure and also edit the /etc/defaults/grub file to make changes. To troubleshoot use the GRUB boot prompt and edi /etc/defaults/grub followed by grub2-mkconfig Loading the Kernel : same as the last phase, make edits to /etc/default/grub and then grub2-mkconfig Starting /sbin/init : - This is compiled into initramfs so this can't be configured. - To troubleshoot , use the \"init=\" kernel boot argument or the rd.break kernel argument Processing initrd.target : - This is also compiled into initramfs , so can't be configured - To resolve issues with this phase , use the dracut command Switch to the root file : - to configure this , edit the /etc/fstab file ( I have this issue alot sometimes ) - To resolve it , like before edit the /etc/fstab file. Running the default target : - to configure this you can set the default target for systemd to boot into. AKA use the systemctl set-default command to boot into another target that can be isolated. To find out which targets can be isolated , navigate to the /usr/lib/systemd/system and run `grep Isolate *.target` This shows you which targets can be used as default as they can be Isolated. ",
    "url": "/_docs/shoot.html",
    
    "relUrl": "/_docs/shoot.html"
  },"89": {
    "doc": "Network Storage",
    "title": "Network Storage",
    "content": "# Network Storage Goals : Decide whether I should buy a RAID enclosure or a NAS for my network storage while learning about the various technologies used which provide context and factor into my decision. # RAID redundant array of Independent disks * needs to have JBOD mode to allow the proxmox truenas vm to manage each individual disk and use redundancy and checksumming on the vm's. Otherwise the disks won't be able to be managed by zfs. # ZFS ",
    "url": "/_docs/storage.html",
    
    "relUrl": "/_docs/storage.html"
  },"90": {
    "doc": "Systemd",
    "title": "Systemd",
    "content": "# Systemd ",
    "url": "/_docs/systemd.html",
    
    "relUrl": "/_docs/systemd.html"
  },"91": {
    "doc": "Tmux notes",
    "title": "Tmux notes",
    "content": "# Tmux notes **Run tmux with diff config file** `tmux -f .something.conf` **Change default terminal** Put this in your .tmux.conf file , the example below changes the default shell to zsh `set -g default-shell /bin/zsh` **Paste using the middle mouse button** Hold Shift while pressing the middle mouse button in a tmux terminal. This will result in the standard OS behavior, allowing you to paste text into the terminal. **Resource tmux file after making changes** For additional info about the keybinds , check the manual. Do \"man tmux \" do `Prefix + :` Then do ```bash :source ~/.tmux.conf ``` ",
    "url": "/_docs/tmux.html",
    
    "relUrl": "/_docs/tmux.html"
  },"92": {
    "doc": "Troubleshooting",
    "title": "Troubleshooting",
    "content": "# Troubleshooting This page is dedicated to issues or problems I have to troubleshoot, this is a very brand new page which might not have alot of information at this time of writing 9/19/2024. However I will try to keep this page updated as new issues arise. I will use the template issue at the bottom of this page to line out the formatting for each individual issue. --- ## DNS Issues **1337x.to redirects to blank page with \"welcome to my web server\"** Below is a picture of the issue ![1337x](/_docs/images/1337x.png) ### Description : Navigating to the https://1337x.to navigates to a blank page with only the text \" Welcome to my web server \" showing. Almost. This looks similar to a default web page setup for a server. It's possible the adguard home service is blocking certain content from the page and the website is redirecting me to a blank page for doing so. ## Notes * Checked for the url on the blocked URL's in the filter for adguard home , removed the blocked URL's for --- # ======= START OF TEMPLATE ======= ## Template issue header **sub issue header** TEXT HERE FOR TEMPLATE ## Description : TEMPLATE TEXT HERE FOR THE ISSUE # ======= END OF TEMPLATE ======= ",
    "url": "/_docs/troubleshooting.html",
    
    "relUrl": "/_docs/troubleshooting.html"
  },"93": {
    "doc": "Tutorial ideas for the youtube channel ( Full Duplex )",
    "title": "Tutorial ideas for the youtube channel ( Full Duplex )",
    "content": "# Tutorial ideas for the youtube channel ( Full Duplex ) This document lists out all ideas for tutorials on my channel that I would like to make regarding linux. Not all ideas here are organized by their type , however I wanted to use this document to list ideas as they come to me. In each idea , I will list out the objectives and topics I would like to cover, as well as some smaller ideas for making the tutorial easiser to digest. This includes links and resources to the material I am basing these videos off of. # Tutorial: LVM's in linux , A brief introduction - explain the concept of LVM's and their practical application - arch of LVM's ( from RHCSA book ) - mention the different filesystems and their limitations with LVM's - Mention how XFS filesystems can be increased , but not shrunk , unlike EXT4 which can do both. - Apply the conecepts and work through an example using the commands listed : pvcreate , vgcreate, vgs , lvs , lvremove , vgremove etc # Tutorial : How to create and manage swap partitions on RHEL - work through a live example on the hypervisor by creating and managing a swap partition , this tutorial will be very short # Tutorial : Automating tasks with Systemd units - show how to setup a systemd unit to automatically backup /var/syslog # Tutorial : Setting up rclone on linux - work through example on how to setup rclone - show an example copying backups to your google cloud - send files and copy files using the software to a local directory - demonstrate how to setup a systemd service file that does this automatically for you # Tutorial : How to setup ProtonVPN on a headless server - demonstrate how to use the protonvpn .ovpn files to automate connecting to your VPN connection # Tutorial : How to setup Network Manager on Debian 12 - install a fresh debian VM and setup network manager - point out how to switch to NetworkManager by deleting the /etc/interfaces file # Tutorial : User management in linux - review over the topics discussed in the RHCSA book and work through users , groups. # Tutorial : Managing File Permissions in Linux - cover the material in the RHCSA book and extra tidbits you feel like discussing systemd service : Run qm backup service and send backups to /tmp use rclone to copy files over delete files in /tmp once finished ",
    "url": "/_docs/tutorial_ideas.html",
    
    "relUrl": "/_docs/tutorial_ideas.html"
  },"94": {
    "doc": "Vim",
    "title": "Vim",
    "content": "# Vim **Quick reference for all the options for your vimrc file** [link](https://vim-jp.org/vimdoc-en/quickref.html#option-list) **How to use macros** 1. use the \"q\" key to start recording. You can select any register to put the macro in, to view registers enter `:reg` on the command prompt. 2. then , start entering the sequence you would like to repeat 3. afterwards, press \"q\" again to stop recording **To replay the macro** Press : > @@ Or to repeat multiple times > 5@@ # Useful keybinds > Ctrl-Z : suspends vim and writes process to a job , use `fg` to bring it back ",
    "url": "/_docs/vim.html",
    
    "relUrl": "/_docs/vim.html"
  },"95": {
    "doc": "Wants",
    "title": "Wants",
    "content": "# Wants * lamps for the livingroom * bathroom mat * RAID enclosure * new couch * new bookshelf for livingroom * shelves for organizing below the desk shelf ",
    "url": "/_docs/wants.html",
    
    "relUrl": "/_docs/wants.html"
  },"96": {
    "doc": "Windows 10 notes WORK IN PROGRESS",
    "title": "Windows 10 notes WORK IN PROGRESS",
    "content": "# Windows 10 notes **WORK IN PROGRESS** ## Table of Contents # Table of Contents 1. [Managing Files](#managing-files) 2. [Environment Variables](#environment-variables) - [Command Snippets](#command-snippets) 3. [Powershell Configuration](#powershell-configuration) 4. [Useful Cmdlets](#useful-cmdlets) - [System Cmdlets](#system-cmdlets) - [File and Directory Cmdlets](#file-and-directory-cmdlets) - [Networking Cmdlets](#networking-cmdlets) - [User and Group Cmdlets](#user-and-group-cmdlets) - [System Monitoring Cmdlets](#system-monitoring-cmdlets) - [Automation and Scripting Cmdlets](#automation-and-scripting-cmdlets) - [Security Cmdlets](#security-cmdlets) - [Windows Update Cmdlets](#windows-update-cmdlets) - [Help and Support Cmdlets](#help-and-support-cmdlets) 5. [Troubleshooting](#troubleshooting) - [Disabled Running Scripts](#disabled-running-scripts) ## Managing files - List 10 largest files for C:\\ in megabytes ```bash Get-ChildItem c:\\ -r -ErrorAction SilentlyContinue –Force |sort -descending -property length | select -first 10 name, DirectoryName, @{Name=\"MB\";Expression={[Math]::round($_.length / 1MB, 2)}} ``` ## Environment Variables The commands below are used to modify existing Environment Variables. ### Command Snippets - List Environment Variables ```bash Get-Childitem env: ``` - Permanantly append Variable to path ```bash setx MyVariable \"MyPersistentValue\" ``` - Add new path to system Path ```bash $newPath = \"$env:Path;C:\\NewPath\" setx Path $newPath ``` - Remove temporary Environment Variable from path ```bash Remove-Item env:MyVariable ``` - Remove persistent Environment Variable from path ```bash setx MyVariable \"\" ``` - Check if Environment Variable exists in a powershell script ```bash if($env:MyVariable) { Write-Output \"MyVariable exists with value $env:MyVariable\" }else { Write-Output \"MyVariable does not exist\" } ``` - Using an Environment Variable in a Script ```bash $env:MyVariable = \"something\" Write-Output \"The value of MyVariable is : $env:MyVariable\" ``` - Add script to PATH temporarily to Current Session ```bash $env:PATH += \";C:\\path\\to\\your\\script\" ``` - Add script to users persistent PATH ```bash [System.Environment]::SetEnvironmentVariable(\"PATH\", $env:PATH + \";C:\\path\\to\\script\", [System.EnvironmentVariableTarget]::User) ``` - List current path ```bash echo $env:path ``` - Temporarily append Variable to path ```bash $env:path += \";C:\\Program Files\\GnuWin32\\bin\" ``` --- ## Powershell configuration - Change Keybinds to Bash like keybinds 1. Check if `$PROFILE` variable exists ```bash echo $PROFILE ``` 2. Open file in path listed in `echo $PROFILE`, in this case i'm using Vim but you can use any editor you like ```bash vim $PROFILE ``` 3. Then , paste the following code into the file ```bash # Load PSReadLine (should already be loaded in most cases) Import-Module PSReadLine # Map Bash-like key bindings Set-PSReadLineKeyHandler -Chord Ctrl+a -Function BeginningOfLine # Move to start of line Set-PSReadLineKeyHandler -Chord Ctrl+e -Function EndOfLine # Move to end of line Set-PSReadLineKeyHandler -Chord Ctrl+k -Function KillLine # Delete text from cursor to end of line Set-PSReadLineKeyHandler -Chord Ctrl+u -Function BackwardDeleteLine # Delete text from cursor to beginning of line Set-PSReadLineKeyHandler -Chord Ctrl+w -Function BackwardKillWord # Delete previous word Set-PSReadLineKeyHandler -Chord Ctrl+y -Function Yank # Paste the last cut text Set-PSReadLineKeyHandler -Chord Ctrl+l -Function ClearScreen # Clear screen ``` 4. Now, save the file and reload profile. ```bash . $PROFILE ``` If you receive an error like below : ``` . : File C:\\Users\\username\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1 cannot be loaded because running scripts is disabled on this system. For more information, see about_Execution_Policies at https:/go.microsoft.com/fwlink/?LinkID=135170. At line:1 char:3 ``` - **Follow the instructions under \"Troubleshooting\" using the link here :** [ERROR:cannot be loaded because running scripts is disabled on this system.](#disabled-running-scripts) > The $PROFILE variable is a variable that contains the path to your windows \"profile\".ps1 , it can be named anything > but this is where you would keep all your custom configurations. In my case the variable contains the path of : > `C:\\Users\\username\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1` - Use bash like aliases in Powershell I am a fan of how bash allowsy you to customize your experience using the beloved ~/.bashrc file. For powershell it's the same process with a verbose syntax compared to bash. For this section I will put some examples below of alises you might want to add. The basic structure of an alias would look like the below - Alias syntax template ```bash Set-Alias -Name -Value \"\" ``` - Remove an alias ```bash Remove-Item Alias: ``` - Alias for Pre-installed Windows command Let's say we wanted to change the alias for Changing the execution policy for the current user. Open the file located in your $PROFILE variable ( check the above inline comments for further info on what this variable is ). ```bash Set-Alias -Name \"Resolve-DnsName\" -Value \"dig\" ``` - Create alias for non-built in script Powershell aliases were intended for running cmdlets, not custom commands. To get around this limitation, you may want to define functions for your custom scripts instead of using `Set-Alias` directly. Please see the below example for how I would do this using a python 3 script. ```bash function tfind{ python3 \"C:\\Users\\buhfur\\tfind\\tfind.py\" } ``` > Note : Aliases in powershell were intended for executing cmdlets and not executing scripts. To get around this you may need to define functions with the command used to execute your script using an alias. Please see the above example for how to do this. --- # Useful cmdlets Below is a gathered list of all cmdlets installed by default on most powershell systems. ## System Cmdlets - **`Get-Command`**: Gets all cmdlets, functions, workflows, aliases installed on your system. - **`Get-Help`**: Displays help information for cmdlets and functions. - **`Get-Process`**: Gets a list of all processes currently running on the local or remote machine. - **`Stop-Process`**: Stops a running process by its process ID or process name. - **`Get-Service`**: Gets the status of services on a local or remote machine. - **`Start-Service`**: Starts a stopped service. - **`Stop-Service`**: Stops a running service. ## File and Directory Cmdlets - **`Get-ChildItem`**: Lists files and directories in a specified location. - **`Set-Location`**: Sets the current working location to a specified path (similar to `cd`). - **`Copy-Item`**: Copies an item from one location to another. - **`Move-Item`**: Moves an item from one location to another. - **`Remove-Item`**: Deletes files and directories. - **`New-Item`**: Creates a new item (file, directory, etc.). - **`Get-Content`**: Reads the content of a file. - **`Set-Content`**: Writes content to a file, replacing existing content. - **`Add-Content`**: Appends content to a file. ## Networking Cmdlets - **`Test-Connection`**: Tests the network connection to a remote host (similar to `ping`). - **`Resolve-DnsName`**: Performs a DNS query for a specified name. - **`Invoke-WebRequest`**: Sends HTTP and HTTPS requests to web pages and retrieves content. - **`Get-NetIPAddress`**: Gets the IP address configuration for network adapters. - **`Get-NetAdapter`**: Gets the status of network adapters. ## User and Group Cmdlets - **`Get-LocalUser`**: Gets local user accounts. - **`Add-LocalUser`**: Creates a new local user account. - **`Remove-LocalUser`**: Deletes a local user account. - **`Get-LocalGroup`**: Gets local groups. - **`Add-LocalGroupMember`**: Adds users to a local group. - **`Remove-LocalGroupMember`**: Removes users from a local group. ## System Monitoring Cmdlets - **`Get-EventLog`**: Retrieves events from the event log. - **`Get-PerformanceCounter`**: Retrieves performance counter data. - **`Measure-Object`**: Calculates properties of objects (e.g., count, sum). ## Automation and Scripting Cmdlets - **`ForEach-Object`**: Processes each item in a collection with a specified script block. - **`Where-Object`**: Filters objects based on specified criteria. - **`Select-Object`**: Selects specific properties from an object. - **`Sort-Object`**: Sorts objects by property values. - **`Export-CSV`**: Exports data to a CSV file. - **`Import-CSV`**: Imports data from a CSV file. ## Security Cmdlets - **`Get-Acl`**: Gets the security descriptor for a specified item (file, folder, etc.). - **`Set-Acl`**: Sets the security descriptor for a specified item. - **`Get-Credential`**: Prompts for user credentials securely. ## Windows Update Cmdlets - **`Get-WindowsUpdateLog`**: Retrieves Windows Update logs. - **`Install-Module`**: Installs PowerShell modules from the PowerShell Gallery. ## Help and Support Cmdlets - **`Get-Command`**: Lists all available commands, including cmdlets, functions, and aliases. - **`Update-Help`**: Downloads and installs the newest help files for PowerShell modules. --- ## Troubleshooting ### Disabled Running Scripts This error indicates the user does not have the execution policy set for a specific user to run scripts inside their session. To allow the user to run the spcified command / script. Follow the instructions below, **make sure you're logged in as administrator**. If there are any scripts that can be used by the admin but not you, it's likely something to do with the execution policy that's been set. - Change Execution Policy to allow Local scripts ```bash Set-ExecutionPolicy RemoteSigned -Scope CurrentUser ``` - Change Execution policy to allow user to run scripts from the internet ```bash Set-ExecutionPolicy Unrestricted -Scope CurrentUser ``` - Bypass prompts for Internet Scripts ```bash Set-ExecutionPolicy Bypass -Scope CurrentUser ``` > The 'RemoteSigned' policy allows scripts created on the local machine to run , while blocking scripts from the internet unless they are signed by a trusted source. > The 'CurrentUser' scope only applies for the currently logged in user account , not the entire system > Even when the Scope is set to 'Unrestricted' , you will still be prompted > --- ",
    "url": "/_docs/windows.html",
    
    "relUrl": "/_docs/windows.html"
  }
}
